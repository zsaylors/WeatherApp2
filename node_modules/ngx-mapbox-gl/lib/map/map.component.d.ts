import { AnimationOptions, EventData, FitBoundsOptions, LngLatBoundsLike, LngLatLike, Map, MapBoxZoomEvent, MapMouseEvent, MapTouchEvent, PointLike, Style } from 'mapbox-gl';
import { MapService, MovingOptions } from './map.service';
import { MapEvent } from './map.types';
import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class MapComponent implements OnChanges, OnDestroy, AfterViewInit, MapEvent {
    private MapService;
    accessToken?: string;
    customMapboxApiUrl?: string;
    hash?: boolean;
    refreshExpiredTiles?: boolean;
    failIfMajorPerformanceCaveat?: boolean;
    classes?: string[];
    bearingSnap?: number;
    interactive?: boolean;
    pitchWithRotate?: boolean;
    clickTolerance?: number;
    attributionControl?: boolean;
    logoPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    maxTileCacheSize?: number;
    localIdeographFontFamily?: string;
    preserveDrawingBuffer?: boolean;
    renderWorldCopies?: boolean;
    trackResize?: boolean;
    transformRequest?: Function;
    bounds?: LngLatBoundsLike;
    antialias?: boolean;
    locale: {
        [key: string]: string;
    };
    minZoom?: number;
    maxZoom?: number;
    scrollZoom?: boolean;
    dragRotate?: boolean;
    touchZoomRotate?: boolean;
    doubleClickZoom?: boolean;
    keyboard?: boolean;
    dragPan?: boolean;
    boxZoom?: boolean;
    style: Style | string;
    center?: LngLatLike;
    maxBounds?: LngLatBoundsLike;
    zoom?: [number];
    bearing?: [number];
    pitch?: [number];
    fitBoundsOptions?: FitBoundsOptions;
    movingMethod: 'jumpTo' | 'easeTo' | 'flyTo';
    movingOptions?: MovingOptions;
    fitBounds?: LngLatBoundsLike;
    fitScreenCoordinates?: [PointLike, PointLike];
    centerWithPanTo?: boolean;
    panToOptions?: AnimationOptions;
    cursorStyle?: string;
    resize: EventEmitter<void>;
    remove: EventEmitter<void>;
    mouseDown: EventEmitter<MapMouseEvent>;
    mouseUp: EventEmitter<MapMouseEvent>;
    mouseMove: EventEmitter<MapMouseEvent>;
    click: EventEmitter<MapMouseEvent>;
    dblClick: EventEmitter<MapMouseEvent>;
    mouseEnter: EventEmitter<MapMouseEvent>;
    mouseLeave: EventEmitter<MapMouseEvent>;
    mouseOver: EventEmitter<MapMouseEvent>;
    mouseOut: EventEmitter<MapMouseEvent>;
    contextMenu: EventEmitter<MapMouseEvent>;
    touchStart: EventEmitter<MapTouchEvent>;
    touchEnd: EventEmitter<MapTouchEvent>;
    touchMove: EventEmitter<MapTouchEvent>;
    touchCancel: EventEmitter<MapTouchEvent>;
    wheel: EventEmitter<any>;
    moveStart: EventEmitter<DragEvent>;
    move: EventEmitter<MapMouseEvent | MapTouchEvent>;
    moveEnd: EventEmitter<DragEvent>;
    dragStart: EventEmitter<DragEvent>;
    drag: EventEmitter<MapMouseEvent | MapTouchEvent>;
    dragEnd: EventEmitter<DragEvent>;
    zoomStart: EventEmitter<MapMouseEvent | MapTouchEvent>;
    zoomEvt: EventEmitter<MapMouseEvent | MapTouchEvent>;
    zoomEnd: EventEmitter<MapMouseEvent | MapTouchEvent>;
    rotateStart: EventEmitter<MapMouseEvent | MapTouchEvent>;
    rotate: EventEmitter<MapMouseEvent | MapTouchEvent>;
    rotateEnd: EventEmitter<MapMouseEvent | MapTouchEvent>;
    pitchStart: EventEmitter<EventData>;
    pitchEvt: EventEmitter<EventData>;
    pitchEnd: EventEmitter<EventData>;
    boxZoomStart: EventEmitter<MapBoxZoomEvent>;
    boxZoomEnd: EventEmitter<MapBoxZoomEvent>;
    boxZoomCancel: EventEmitter<MapBoxZoomEvent>;
    webGlContextLost: EventEmitter<void>;
    webGlContextRestored: EventEmitter<void>;
    load: EventEmitter<any>;
    idle: EventEmitter<void>;
    render: EventEmitter<void>;
    error: EventEmitter<any>;
    data: EventEmitter<EventData>;
    styleData: EventEmitter<EventData>;
    sourceData: EventEmitter<EventData>;
    dataLoading: EventEmitter<EventData>;
    styleDataLoading: EventEmitter<EventData>;
    sourceDataLoading: EventEmitter<EventData>;
    styleImageMissing: EventEmitter<{
        id: string;
    }>;
    readonly mapInstance: Map;
    mapContainer: ElementRef;
    constructor(MapService: MapService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MapComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MapComponent, "mgl-map", never, {
    "movingMethod": "movingMethod";
    "accessToken": "accessToken";
    "customMapboxApiUrl": "customMapboxApiUrl";
    "hash": "hash";
    "refreshExpiredTiles": "refreshExpiredTiles";
    "failIfMajorPerformanceCaveat": "failIfMajorPerformanceCaveat";
    "classes": "classes";
    "bearingSnap": "bearingSnap";
    "interactive": "interactive";
    "pitchWithRotate": "pitchWithRotate";
    "clickTolerance": "clickTolerance";
    "attributionControl": "attributionControl";
    "logoPosition": "logoPosition";
    "maxTileCacheSize": "maxTileCacheSize";
    "localIdeographFontFamily": "localIdeographFontFamily";
    "preserveDrawingBuffer": "preserveDrawingBuffer";
    "renderWorldCopies": "renderWorldCopies";
    "trackResize": "trackResize";
    "transformRequest": "transformRequest";
    "bounds": "bounds";
    "antialias": "antialias";
    "locale": "locale";
    "minZoom": "minZoom";
    "maxZoom": "maxZoom";
    "scrollZoom": "scrollZoom";
    "dragRotate": "dragRotate";
    "touchZoomRotate": "touchZoomRotate";
    "doubleClickZoom": "doubleClickZoom";
    "keyboard": "keyboard";
    "dragPan": "dragPan";
    "boxZoom": "boxZoom";
    "style": "style";
    "center": "center";
    "maxBounds": "maxBounds";
    "zoom": "zoom";
    "bearing": "bearing";
    "pitch": "pitch";
    "fitBoundsOptions": "fitBoundsOptions";
    "movingOptions": "movingOptions";
    "fitBounds": "fitBounds";
    "fitScreenCoordinates": "fitScreenCoordinates";
    "centerWithPanTo": "centerWithPanTo";
    "panToOptions": "panToOptions";
    "cursorStyle": "cursorStyle";
}, {
    "resize": "resize";
    "remove": "remove";
    "mouseDown": "mouseDown";
    "mouseUp": "mouseUp";
    "mouseMove": "mouseMove";
    "click": "click";
    "dblClick": "dblClick";
    "mouseEnter": "mouseEnter";
    "mouseLeave": "mouseLeave";
    "mouseOver": "mouseOver";
    "mouseOut": "mouseOut";
    "contextMenu": "contextMenu";
    "touchStart": "touchStart";
    "touchEnd": "touchEnd";
    "touchMove": "touchMove";
    "touchCancel": "touchCancel";
    "wheel": "wheel";
    "moveStart": "moveStart";
    "move": "move";
    "moveEnd": "moveEnd";
    "dragStart": "dragStart";
    "drag": "drag";
    "dragEnd": "dragEnd";
    "zoomStart": "zoomStart";
    "zoomEvt": "zoomEvt";
    "zoomEnd": "zoomEnd";
    "rotateStart": "rotateStart";
    "rotate": "rotate";
    "rotateEnd": "rotateEnd";
    "pitchStart": "pitchStart";
    "pitchEvt": "pitchEvt";
    "pitchEnd": "pitchEnd";
    "boxZoomStart": "boxZoomStart";
    "boxZoomEnd": "boxZoomEnd";
    "boxZoomCancel": "boxZoomCancel";
    "webGlContextLost": "webGlContextLost";
    "webGlContextRestored": "webGlContextRestored";
    "load": "load";
    "idle": "idle";
    "render": "render";
    "error": "error";
    "data": "data";
    "styleData": "styleData";
    "sourceData": "sourceData";
    "dataLoading": "dataLoading";
    "styleDataLoading": "styleDataLoading";
    "sourceDataLoading": "sourceDataLoading";
    "styleImageMissing": "styleImageMissing";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtYXAuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0dBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5pbWF0aW9uT3B0aW9ucywgRXZlbnREYXRhLCBGaXRCb3VuZHNPcHRpb25zLCBMbmdMYXRCb3VuZHNMaWtlLCBMbmdMYXRMaWtlLCBNYXAsIE1hcEJveFpvb21FdmVudCwgTWFwTW91c2VFdmVudCwgTWFwVG91Y2hFdmVudCwgUG9pbnRMaWtlLCBTdHlsZSB9IGZyb20gJ21hcGJveC1nbCc7XHJcbmltcG9ydCB7IE1hcFNlcnZpY2UsIE1vdmluZ09wdGlvbnMgfSBmcm9tICcuL21hcC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTWFwRXZlbnQgfSBmcm9tICcuL21hcC50eXBlcyc7XHJcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWFwQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE1hcEV2ZW50IHtcclxuICAgIHByaXZhdGUgTWFwU2VydmljZTtcclxuICAgIGFjY2Vzc1Rva2VuPzogc3RyaW5nO1xyXG4gICAgY3VzdG9tTWFwYm94QXBpVXJsPzogc3RyaW5nO1xyXG4gICAgaGFzaD86IGJvb2xlYW47XHJcbiAgICByZWZyZXNoRXhwaXJlZFRpbGVzPzogYm9vbGVhbjtcclxuICAgIGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ/OiBib29sZWFuO1xyXG4gICAgY2xhc3Nlcz86IHN0cmluZ1tdO1xyXG4gICAgYmVhcmluZ1NuYXA/OiBudW1iZXI7XHJcbiAgICBpbnRlcmFjdGl2ZT86IGJvb2xlYW47XHJcbiAgICBwaXRjaFdpdGhSb3RhdGU/OiBib29sZWFuO1xyXG4gICAgY2xpY2tUb2xlcmFuY2U/OiBudW1iZXI7XHJcbiAgICBhdHRyaWJ1dGlvbkNvbnRyb2w/OiBib29sZWFuO1xyXG4gICAgbG9nb1Bvc2l0aW9uPzogJ3RvcC1sZWZ0JyB8ICd0b3AtcmlnaHQnIHwgJ2JvdHRvbS1sZWZ0JyB8ICdib3R0b20tcmlnaHQnO1xyXG4gICAgbWF4VGlsZUNhY2hlU2l6ZT86IG51bWJlcjtcclxuICAgIGxvY2FsSWRlb2dyYXBoRm9udEZhbWlseT86IHN0cmluZztcclxuICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcj86IGJvb2xlYW47XHJcbiAgICByZW5kZXJXb3JsZENvcGllcz86IGJvb2xlYW47XHJcbiAgICB0cmFja1Jlc2l6ZT86IGJvb2xlYW47XHJcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0PzogRnVuY3Rpb247XHJcbiAgICBib3VuZHM/OiBMbmdMYXRCb3VuZHNMaWtlO1xyXG4gICAgYW50aWFsaWFzPzogYm9vbGVhbjtcclxuICAgIGxvY2FsZToge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcclxuICAgIH07XHJcbiAgICBtaW5ab29tPzogbnVtYmVyO1xyXG4gICAgbWF4Wm9vbT86IG51bWJlcjtcclxuICAgIHNjcm9sbFpvb20/OiBib29sZWFuO1xyXG4gICAgZHJhZ1JvdGF0ZT86IGJvb2xlYW47XHJcbiAgICB0b3VjaFpvb21Sb3RhdGU/OiBib29sZWFuO1xyXG4gICAgZG91YmxlQ2xpY2tab29tPzogYm9vbGVhbjtcclxuICAgIGtleWJvYXJkPzogYm9vbGVhbjtcclxuICAgIGRyYWdQYW4/OiBib29sZWFuO1xyXG4gICAgYm94Wm9vbT86IGJvb2xlYW47XHJcbiAgICBzdHlsZTogU3R5bGUgfCBzdHJpbmc7XHJcbiAgICBjZW50ZXI/OiBMbmdMYXRMaWtlO1xyXG4gICAgbWF4Qm91bmRzPzogTG5nTGF0Qm91bmRzTGlrZTtcclxuICAgIHpvb20/OiBbbnVtYmVyXTtcclxuICAgIGJlYXJpbmc/OiBbbnVtYmVyXTtcclxuICAgIHBpdGNoPzogW251bWJlcl07XHJcbiAgICBmaXRCb3VuZHNPcHRpb25zPzogRml0Qm91bmRzT3B0aW9ucztcclxuICAgIG1vdmluZ01ldGhvZDogJ2p1bXBUbycgfCAnZWFzZVRvJyB8ICdmbHlUbyc7XHJcbiAgICBtb3ZpbmdPcHRpb25zPzogTW92aW5nT3B0aW9ucztcclxuICAgIGZpdEJvdW5kcz86IExuZ0xhdEJvdW5kc0xpa2U7XHJcbiAgICBmaXRTY3JlZW5Db29yZGluYXRlcz86IFtQb2ludExpa2UsIFBvaW50TGlrZV07XHJcbiAgICBjZW50ZXJXaXRoUGFuVG8/OiBib29sZWFuO1xyXG4gICAgcGFuVG9PcHRpb25zPzogQW5pbWF0aW9uT3B0aW9ucztcclxuICAgIGN1cnNvclN0eWxlPzogc3RyaW5nO1xyXG4gICAgcmVzaXplOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICByZW1vdmU6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIG1vdXNlRG93bjogRXZlbnRFbWl0dGVyPE1hcE1vdXNlRXZlbnQ+O1xyXG4gICAgbW91c2VVcDogRXZlbnRFbWl0dGVyPE1hcE1vdXNlRXZlbnQ+O1xyXG4gICAgbW91c2VNb3ZlOiBFdmVudEVtaXR0ZXI8TWFwTW91c2VFdmVudD47XHJcbiAgICBjbGljazogRXZlbnRFbWl0dGVyPE1hcE1vdXNlRXZlbnQ+O1xyXG4gICAgZGJsQ2xpY2s6IEV2ZW50RW1pdHRlcjxNYXBNb3VzZUV2ZW50PjtcclxuICAgIG1vdXNlRW50ZXI6IEV2ZW50RW1pdHRlcjxNYXBNb3VzZUV2ZW50PjtcclxuICAgIG1vdXNlTGVhdmU6IEV2ZW50RW1pdHRlcjxNYXBNb3VzZUV2ZW50PjtcclxuICAgIG1vdXNlT3ZlcjogRXZlbnRFbWl0dGVyPE1hcE1vdXNlRXZlbnQ+O1xyXG4gICAgbW91c2VPdXQ6IEV2ZW50RW1pdHRlcjxNYXBNb3VzZUV2ZW50PjtcclxuICAgIGNvbnRleHRNZW51OiBFdmVudEVtaXR0ZXI8TWFwTW91c2VFdmVudD47XHJcbiAgICB0b3VjaFN0YXJ0OiBFdmVudEVtaXR0ZXI8TWFwVG91Y2hFdmVudD47XHJcbiAgICB0b3VjaEVuZDogRXZlbnRFbWl0dGVyPE1hcFRvdWNoRXZlbnQ+O1xyXG4gICAgdG91Y2hNb3ZlOiBFdmVudEVtaXR0ZXI8TWFwVG91Y2hFdmVudD47XHJcbiAgICB0b3VjaENhbmNlbDogRXZlbnRFbWl0dGVyPE1hcFRvdWNoRXZlbnQ+O1xyXG4gICAgd2hlZWw6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgbW92ZVN0YXJ0OiBFdmVudEVtaXR0ZXI8RHJhZ0V2ZW50PjtcclxuICAgIG1vdmU6IEV2ZW50RW1pdHRlcjxNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudD47XHJcbiAgICBtb3ZlRW5kOiBFdmVudEVtaXR0ZXI8RHJhZ0V2ZW50PjtcclxuICAgIGRyYWdTdGFydDogRXZlbnRFbWl0dGVyPERyYWdFdmVudD47XHJcbiAgICBkcmFnOiBFdmVudEVtaXR0ZXI8TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnQ+O1xyXG4gICAgZHJhZ0VuZDogRXZlbnRFbWl0dGVyPERyYWdFdmVudD47XHJcbiAgICB6b29tU3RhcnQ6IEV2ZW50RW1pdHRlcjxNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudD47XHJcbiAgICB6b29tRXZ0OiBFdmVudEVtaXR0ZXI8TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnQ+O1xyXG4gICAgem9vbUVuZDogRXZlbnRFbWl0dGVyPE1hcE1vdXNlRXZlbnQgfCBNYXBUb3VjaEV2ZW50PjtcclxuICAgIHJvdGF0ZVN0YXJ0OiBFdmVudEVtaXR0ZXI8TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnQ+O1xyXG4gICAgcm90YXRlOiBFdmVudEVtaXR0ZXI8TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnQ+O1xyXG4gICAgcm90YXRlRW5kOiBFdmVudEVtaXR0ZXI8TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnQ+O1xyXG4gICAgcGl0Y2hTdGFydDogRXZlbnRFbWl0dGVyPEV2ZW50RGF0YT47XHJcbiAgICBwaXRjaEV2dDogRXZlbnRFbWl0dGVyPEV2ZW50RGF0YT47XHJcbiAgICBwaXRjaEVuZDogRXZlbnRFbWl0dGVyPEV2ZW50RGF0YT47XHJcbiAgICBib3hab29tU3RhcnQ6IEV2ZW50RW1pdHRlcjxNYXBCb3hab29tRXZlbnQ+O1xyXG4gICAgYm94Wm9vbUVuZDogRXZlbnRFbWl0dGVyPE1hcEJveFpvb21FdmVudD47XHJcbiAgICBib3hab29tQ2FuY2VsOiBFdmVudEVtaXR0ZXI8TWFwQm94Wm9vbUV2ZW50PjtcclxuICAgIHdlYkdsQ29udGV4dExvc3Q6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIHdlYkdsQ29udGV4dFJlc3RvcmVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICBsb2FkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGlkbGU6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIHJlbmRlcjogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgZGF0YTogRXZlbnRFbWl0dGVyPEV2ZW50RGF0YT47XHJcbiAgICBzdHlsZURhdGE6IEV2ZW50RW1pdHRlcjxFdmVudERhdGE+O1xyXG4gICAgc291cmNlRGF0YTogRXZlbnRFbWl0dGVyPEV2ZW50RGF0YT47XHJcbiAgICBkYXRhTG9hZGluZzogRXZlbnRFbWl0dGVyPEV2ZW50RGF0YT47XHJcbiAgICBzdHlsZURhdGFMb2FkaW5nOiBFdmVudEVtaXR0ZXI8RXZlbnREYXRhPjtcclxuICAgIHNvdXJjZURhdGFMb2FkaW5nOiBFdmVudEVtaXR0ZXI8RXZlbnREYXRhPjtcclxuICAgIHN0eWxlSW1hZ2VNaXNzaW5nOiBFdmVudEVtaXR0ZXI8e1xyXG4gICAgICAgIGlkOiBzdHJpbmc7XHJcbiAgICB9PjtcclxuICAgIHJlYWRvbmx5IG1hcEluc3RhbmNlOiBNYXA7XHJcbiAgICBtYXBDb250YWluZXI6IEVsZW1lbnRSZWY7XHJcbiAgICBjb25zdHJ1Y3RvcihNYXBTZXJ2aWNlOiBNYXBTZXJ2aWNlKTtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiBQcm9taXNlPHZvaWQ+O1xyXG59XHJcbiJdfQ==