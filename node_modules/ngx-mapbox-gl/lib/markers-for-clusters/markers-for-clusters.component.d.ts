import { AfterContentInit, ChangeDetectorRef, NgZone, OnDestroy, TemplateRef } from '@angular/core';
import { MapboxGeoJSONFeature } from 'mapbox-gl';
import { MapService } from '../map/map.service';
import * as ɵngcc0 from '@angular/core';
export declare class PointDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PointDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PointDirective, "ng-template[mglPoint]", never, {}, {}, never>;
}
export declare class ClusterPointDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClusterPointDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClusterPointDirective, "ng-template[mglClusterPoint]", never, {}, {}, never>;
}
export declare class MarkersForClustersComponent implements OnDestroy, AfterContentInit {
    private MapService;
    private ChangeDetectorRef;
    private zone;
    source: string;
    pointTpl?: TemplateRef<any>;
    clusterPointTpl: TemplateRef<any>;
    clusterPoints: MapboxGeoJSONFeature[];
    layerId: string;
    private sub;
    constructor(MapService: MapService, ChangeDetectorRef: ChangeDetectorRef, zone: NgZone);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    trackByClusterPoint(_index: number, clusterPoint: {
        id: number;
    }): number;
    private updateCluster;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkersForClustersComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MarkersForClustersComponent, "mgl-markers-for-clusters", never, {
    "source": "source";
}, {}, ["pointTpl", "clusterPointTpl"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy1mb3ItY2x1c3RlcnMuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1hcmtlcnMtZm9yLWNsdXN0ZXJzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7OztBQUNBOzs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBPbkRlc3Ryb3ksIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE1hcGJveEdlb0pTT05GZWF0dXJlIH0gZnJvbSAnbWFwYm94LWdsJztcclxuaW1wb3J0IHsgTWFwU2VydmljZSB9IGZyb20gJy4uL21hcC9tYXAuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvaW50RGlyZWN0aXZlIHtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHVzdGVyUG9pbnREaXJlY3RpdmUge1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hcmtlcnNGb3JDbHVzdGVyc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgICBwcml2YXRlIE1hcFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIENoYW5nZURldGVjdG9yUmVmO1xyXG4gICAgcHJpdmF0ZSB6b25lO1xyXG4gICAgc291cmNlOiBzdHJpbmc7XHJcbiAgICBwb2ludFRwbD86IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBjbHVzdGVyUG9pbnRUcGw6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBjbHVzdGVyUG9pbnRzOiBNYXBib3hHZW9KU09ORmVhdHVyZVtdO1xyXG4gICAgbGF5ZXJJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBzdWI7XHJcbiAgICBjb25zdHJ1Y3RvcihNYXBTZXJ2aWNlOiBNYXBTZXJ2aWNlLCBDaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHpvbmU6IE5nWm9uZSk7XHJcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICB0cmFja0J5Q2x1c3RlclBvaW50KF9pbmRleDogbnVtYmVyLCBjbHVzdGVyUG9pbnQ6IHtcclxuICAgICAgICBpZDogbnVtYmVyO1xyXG4gICAgfSk6IG51bWJlcjtcclxuICAgIHByaXZhdGUgdXBkYXRlQ2x1c3RlcjtcclxufVxyXG4iXX0=