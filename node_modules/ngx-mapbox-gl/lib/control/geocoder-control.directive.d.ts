import { AfterContentInit, EventEmitter, InjectionToken, NgZone, OnChanges, SimpleChanges } from '@angular/core';
import { MapService } from '../map/map.service';
import { GeocoderEvent } from '../map/map.types';
import { ControlComponent } from './control.component';
import * as ɵngcc0 from '@angular/core';
export declare const MAPBOX_GEOCODER_API_KEY: InjectionToken<unknown>;
export interface LngLatLiteral {
    latitude: number;
    longitude: number;
}
export interface Results extends GeoJSON.FeatureCollection<GeoJSON.Point> {
    attribution: string;
    query: string[];
}
export interface Result extends GeoJSON.Feature<GeoJSON.Point> {
    bbox: [number, number, number, number];
    center: number[];
    place_name: string;
    place_type: string[];
    relevance: number;
    text: string;
    address: string;
    context: any[];
}
export declare class GeocoderControlDirective implements AfterContentInit, OnChanges, GeocoderEvent {
    private MapService;
    private zone;
    private ControlComponent;
    private readonly MAPBOX_GEOCODER_API_KEY;
    countries?: string;
    placeholder?: string;
    zoom?: number;
    bbox?: [number, number, number, number];
    types?: string;
    flyTo?: boolean;
    minLength?: number;
    limit?: number;
    language?: string;
    accessToken?: string;
    filter?: (feature: Result) => boolean;
    localGeocoder?: (query: string) => Result[];
    proximity?: LngLatLiteral;
    searchInput?: string;
    clear: EventEmitter<void>;
    loading: EventEmitter<{
        query: string;
    }>;
    results: EventEmitter<Results>;
    result: EventEmitter<{
        result: Result;
    }>;
    error: EventEmitter<any>;
    geocoder: any;
    private lastResultId?;
    constructor(MapService: MapService, zone: NgZone, ControlComponent: ControlComponent, MAPBOX_GEOCODER_API_KEY: string);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private addControl;
    private hookEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GeocoderControlDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<GeocoderControlDirective, "[mglGeocoder]", never, {
    "countries": "countries";
    "placeholder": "placeholder";
    "zoom": "zoom";
    "bbox": "bbox";
    "types": "types";
    "flyTo": "flyTo";
    "minLength": "minLength";
    "limit": "limit";
    "language": "language";
    "accessToken": "accessToken";
    "filter": "filter";
    "localGeocoder": "localGeocoder";
    "proximity": "proximity";
    "searchInput": "searchInput";
}, {
    "clear": "clear";
    "loading": "loading";
    "results": "results";
    "result": "result";
    "error": "error";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvY29kZXItY29udHJvbC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZ2VvY29kZXItY29udHJvbC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzREEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBFdmVudEVtaXR0ZXIsIEluamVjdGlvblRva2VuLCBOZ1pvbmUsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXBTZXJ2aWNlIH0gZnJvbSAnLi4vbWFwL21hcC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgR2VvY29kZXJFdmVudCB9IGZyb20gJy4uL21hcC9tYXAudHlwZXMnO1xyXG5pbXBvcnQgeyBDb250cm9sQ29tcG9uZW50IH0gZnJvbSAnLi9jb250cm9sLmNvbXBvbmVudCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IE1BUEJPWF9HRU9DT0RFUl9BUElfS0VZOiBJbmplY3Rpb25Ub2tlbjx1bmtub3duPjtcclxuZXhwb3J0IGludGVyZmFjZSBMbmdMYXRMaXRlcmFsIHtcclxuICAgIGxhdGl0dWRlOiBudW1iZXI7XHJcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdHMgZXh0ZW5kcyBHZW9KU09OLkZlYXR1cmVDb2xsZWN0aW9uPEdlb0pTT04uUG9pbnQ+IHtcclxuICAgIGF0dHJpYnV0aW9uOiBzdHJpbmc7XHJcbiAgICBxdWVyeTogc3RyaW5nW107XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHQgZXh0ZW5kcyBHZW9KU09OLkZlYXR1cmU8R2VvSlNPTi5Qb2ludD4ge1xyXG4gICAgYmJveDogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XHJcbiAgICBjZW50ZXI6IG51bWJlcltdO1xyXG4gICAgcGxhY2VfbmFtZTogc3RyaW5nO1xyXG4gICAgcGxhY2VfdHlwZTogc3RyaW5nW107XHJcbiAgICByZWxldmFuY2U6IG51bWJlcjtcclxuICAgIHRleHQ6IHN0cmluZztcclxuICAgIGFkZHJlc3M6IHN0cmluZztcclxuICAgIGNvbnRleHQ6IGFueVtdO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdlb2NvZGVyQ29udHJvbERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcywgR2VvY29kZXJFdmVudCB7XHJcbiAgICBwcml2YXRlIE1hcFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHpvbmU7XHJcbiAgICBwcml2YXRlIENvbnRyb2xDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IE1BUEJPWF9HRU9DT0RFUl9BUElfS0VZO1xyXG4gICAgY291bnRyaWVzPzogc3RyaW5nO1xyXG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgICB6b29tPzogbnVtYmVyO1xyXG4gICAgYmJveD86IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xyXG4gICAgdHlwZXM/OiBzdHJpbmc7XHJcbiAgICBmbHlUbz86IGJvb2xlYW47XHJcbiAgICBtaW5MZW5ndGg/OiBudW1iZXI7XHJcbiAgICBsaW1pdD86IG51bWJlcjtcclxuICAgIGxhbmd1YWdlPzogc3RyaW5nO1xyXG4gICAgYWNjZXNzVG9rZW4/OiBzdHJpbmc7XHJcbiAgICBmaWx0ZXI/OiAoZmVhdHVyZTogUmVzdWx0KSA9PiBib29sZWFuO1xyXG4gICAgbG9jYWxHZW9jb2Rlcj86IChxdWVyeTogc3RyaW5nKSA9PiBSZXN1bHRbXTtcclxuICAgIHByb3hpbWl0eT86IExuZ0xhdExpdGVyYWw7XHJcbiAgICBzZWFyY2hJbnB1dD86IHN0cmluZztcclxuICAgIGNsZWFyOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICBsb2FkaW5nOiBFdmVudEVtaXR0ZXI8e1xyXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmc7XHJcbiAgICB9PjtcclxuICAgIHJlc3VsdHM6IEV2ZW50RW1pdHRlcjxSZXN1bHRzPjtcclxuICAgIHJlc3VsdDogRXZlbnRFbWl0dGVyPHtcclxuICAgICAgICByZXN1bHQ6IFJlc3VsdDtcclxuICAgIH0+O1xyXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgZ2VvY29kZXI6IGFueTtcclxuICAgIHByaXZhdGUgbGFzdFJlc3VsdElkPztcclxuICAgIGNvbnN0cnVjdG9yKE1hcFNlcnZpY2U6IE1hcFNlcnZpY2UsIHpvbmU6IE5nWm9uZSwgQ29udHJvbENvbXBvbmVudDogQ29udHJvbENvbXBvbmVudCwgTUFQQk9YX0dFT0NPREVSX0FQSV9LRVk6IHN0cmluZyk7XHJcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBhZGRDb250cm9sO1xyXG4gICAgcHJpdmF0ZSBob29rRXZlbnRzO1xyXG59XHJcbiJdfQ==