import { OnChanges, OnDestroy, OnInit, SimpleChanges, NgZone } from '@angular/core';
import { GeoJSONSourceOptions } from 'mapbox-gl';
import { Subject } from 'rxjs';
import { MapService } from '../../map/map.service';
import * as ɵngcc0 from '@angular/core';
export declare class GeoJSONSourceComponent implements OnInit, OnDestroy, OnChanges, GeoJSONSourceOptions {
    private MapService;
    private zone;
    id: string;
    data?: GeoJSON.Feature<GeoJSON.Geometry> | GeoJSON.FeatureCollection<GeoJSON.Geometry> | string;
    minzoom?: number;
    maxzoom?: number;
    buffer?: number;
    tolerance?: number;
    generateId?: boolean;
    cluster?: boolean;
    clusterRadius?: number;
    clusterMaxZoom?: number;
    clusterProperties?: any;
    updateFeatureData: Subject<unknown>;
    private sub;
    private sourceAdded;
    private featureIdCounter;
    constructor(MapService: MapService, zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * For clustered sources, fetches the zoom at which the given cluster expands.
     * @param clusterId The value of the cluster's cluster_id property.
     */
    getClusterExpansionZoom(clusterId: number): Promise<number>;
    /**
     * For clustered sources, fetches the children of the given cluster on the next zoom level (as an array of GeoJSON features).
     * @param clusterId The value of the cluster's cluster_id property.
     */
    getClusterChildren(clusterId: number): Promise<import("geojson").Feature<import("geojson").Geometry, import("geojson").GeoJsonProperties>[]>;
    /**
     * For clustered sources, fetches the original points that belong to the cluster (as an array of GeoJSON features).
     * @param clusterId The value of the cluster's cluster_id property.
     * @param limit The maximum number of features to return.
     * @param offset The number of features to skip (e.g. for pagination).
     */
    getClusterLeaves(clusterId: number, limit: number, offset: number): Promise<import("geojson").Feature<import("geojson").Geometry, import("geojson").GeoJsonProperties>[]>;
    _addFeature(feature: GeoJSON.Feature<GeoJSON.GeometryObject>): void;
    _removeFeature(feature: GeoJSON.Feature<GeoJSON.GeometryObject>): void;
    _getNewFeatureId(): number;
    private init;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GeoJSONSourceComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GeoJSONSourceComponent, "mgl-geojson-source", never, {
    "data": "data";
    "id": "id";
    "minzoom": "minzoom";
    "maxzoom": "maxzoom";
    "buffer": "buffer";
    "tolerance": "tolerance";
    "generateId": "generateId";
    "cluster": "cluster";
    "clusterRadius": "clusterRadius";
    "clusterMaxZoom": "clusterMaxZoom";
    "clusterProperties": "clusterProperties";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvanNvbi1zb3VyY2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdlb2pzb24tc291cmNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR2VvSlNPTlNvdXJjZU9wdGlvbnMgfSBmcm9tICdtYXBib3gtZ2wnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE1hcFNlcnZpY2UgfSBmcm9tICcuLi8uLi9tYXAvbWFwLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHZW9KU09OU291cmNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgR2VvSlNPTlNvdXJjZU9wdGlvbnMge1xyXG4gICAgcHJpdmF0ZSBNYXBTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSB6b25lO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGRhdGE/OiBHZW9KU09OLkZlYXR1cmU8R2VvSlNPTi5HZW9tZXRyeT4gfCBHZW9KU09OLkZlYXR1cmVDb2xsZWN0aW9uPEdlb0pTT04uR2VvbWV0cnk+IHwgc3RyaW5nO1xyXG4gICAgbWluem9vbT86IG51bWJlcjtcclxuICAgIG1heHpvb20/OiBudW1iZXI7XHJcbiAgICBidWZmZXI/OiBudW1iZXI7XHJcbiAgICB0b2xlcmFuY2U/OiBudW1iZXI7XHJcbiAgICBnZW5lcmF0ZUlkPzogYm9vbGVhbjtcclxuICAgIGNsdXN0ZXI/OiBib29sZWFuO1xyXG4gICAgY2x1c3RlclJhZGl1cz86IG51bWJlcjtcclxuICAgIGNsdXN0ZXJNYXhab29tPzogbnVtYmVyO1xyXG4gICAgY2x1c3RlclByb3BlcnRpZXM/OiBhbnk7XHJcbiAgICB1cGRhdGVGZWF0dXJlRGF0YTogU3ViamVjdDx1bmtub3duPjtcclxuICAgIHByaXZhdGUgc3ViO1xyXG4gICAgcHJpdmF0ZSBzb3VyY2VBZGRlZDtcclxuICAgIHByaXZhdGUgZmVhdHVyZUlkQ291bnRlcjtcclxuICAgIGNvbnN0cnVjdG9yKE1hcFNlcnZpY2U6IE1hcFNlcnZpY2UsIHpvbmU6IE5nWm9uZSk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3IgY2x1c3RlcmVkIHNvdXJjZXMsIGZldGNoZXMgdGhlIHpvb20gYXQgd2hpY2ggdGhlIGdpdmVuIGNsdXN0ZXIgZXhwYW5kcy5cclxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgVGhlIHZhbHVlIG9mIHRoZSBjbHVzdGVyJ3MgY2x1c3Rlcl9pZCBwcm9wZXJ0eS5cclxuICAgICAqL1xyXG4gICAgZ2V0Q2x1c3RlckV4cGFuc2lvblpvb20oY2x1c3RlcklkOiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj47XHJcbiAgICAvKipcclxuICAgICAqIEZvciBjbHVzdGVyZWQgc291cmNlcywgZmV0Y2hlcyB0aGUgY2hpbGRyZW4gb2YgdGhlIGdpdmVuIGNsdXN0ZXIgb24gdGhlIG5leHQgem9vbSBsZXZlbCAoYXMgYW4gYXJyYXkgb2YgR2VvSlNPTiBmZWF0dXJlcykuXHJcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIFRoZSB2YWx1ZSBvZiB0aGUgY2x1c3RlcidzIGNsdXN0ZXJfaWQgcHJvcGVydHkuXHJcbiAgICAgKi9cclxuICAgIGdldENsdXN0ZXJDaGlsZHJlbihjbHVzdGVySWQ6IG51bWJlcik6IFByb21pc2U8aW1wb3J0KFwiZ2VvanNvblwiKS5GZWF0dXJlPGltcG9ydChcImdlb2pzb25cIikuR2VvbWV0cnksIGltcG9ydChcImdlb2pzb25cIikuR2VvSnNvblByb3BlcnRpZXM+W10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3IgY2x1c3RlcmVkIHNvdXJjZXMsIGZldGNoZXMgdGhlIG9yaWdpbmFsIHBvaW50cyB0aGF0IGJlbG9uZyB0byB0aGUgY2x1c3RlciAoYXMgYW4gYXJyYXkgb2YgR2VvSlNPTiBmZWF0dXJlcykuXHJcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIFRoZSB2YWx1ZSBvZiB0aGUgY2x1c3RlcidzIGNsdXN0ZXJfaWQgcHJvcGVydHkuXHJcbiAgICAgKiBAcGFyYW0gbGltaXQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGZlYXR1cmVzIHRvIHJldHVybi5cclxuICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIG51bWJlciBvZiBmZWF0dXJlcyB0byBza2lwIChlLmcuIGZvciBwYWdpbmF0aW9uKS5cclxuICAgICAqL1xyXG4gICAgZ2V0Q2x1c3RlckxlYXZlcyhjbHVzdGVySWQ6IG51bWJlciwgbGltaXQ6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpOiBQcm9taXNlPGltcG9ydChcImdlb2pzb25cIikuRmVhdHVyZTxpbXBvcnQoXCJnZW9qc29uXCIpLkdlb21ldHJ5LCBpbXBvcnQoXCJnZW9qc29uXCIpLkdlb0pzb25Qcm9wZXJ0aWVzPltdPjtcclxuICAgIF9hZGRGZWF0dXJlKGZlYXR1cmU6IEdlb0pTT04uRmVhdHVyZTxHZW9KU09OLkdlb21ldHJ5T2JqZWN0Pik6IHZvaWQ7XHJcbiAgICBfcmVtb3ZlRmVhdHVyZShmZWF0dXJlOiBHZW9KU09OLkZlYXR1cmU8R2VvSlNPTi5HZW9tZXRyeU9iamVjdD4pOiB2b2lkO1xyXG4gICAgX2dldE5ld0ZlYXR1cmVJZCgpOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGluaXQ7XHJcbn1cclxuIl19