import { AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, SimpleChanges, EventEmitter } from '@angular/core';
import { PointLike, Popup, LngLatLike } from 'mapbox-gl';
import { MapService } from '../map/map.service';
import { MarkerComponent } from '../marker/marker.component';
import * as ɵngcc0 from '@angular/core';
export declare class PopupComponent implements OnChanges, OnDestroy, AfterViewInit, OnInit {
    private MapService;
    closeButton?: boolean;
    closeOnClick?: boolean;
    anchor?: 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left';
    offset?: number | PointLike | {
        [anchor: string]: [number, number];
    };
    className?: string;
    maxWidth?: string;
    feature?: GeoJSON.Feature<GeoJSON.Point>;
    lngLat?: LngLatLike;
    marker?: MarkerComponent;
    close: EventEmitter<void>;
    open: EventEmitter<void>;
    content: ElementRef;
    popupInstance?: Popup;
    constructor(MapService: MapService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private createPopup;
    private addPopup;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PopupComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PopupComponent, "mgl-popup", never, {
    "closeButton": "closeButton";
    "closeOnClick": "closeOnClick";
    "anchor": "anchor";
    "offset": "offset";
    "className": "className";
    "maxWidth": "maxWidth";
    "feature": "feature";
    "lngLat": "lngLat";
    "marker": "marker";
}, {
    "close": "close";
    "open": "open";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvcHVwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9pbnRMaWtlLCBQb3B1cCwgTG5nTGF0TGlrZSB9IGZyb20gJ21hcGJveC1nbCc7XHJcbmltcG9ydCB7IE1hcFNlcnZpY2UgfSBmcm9tICcuLi9tYXAvbWFwLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBNYXJrZXJDb21wb25lbnQgfSBmcm9tICcuLi9tYXJrZXIvbWFya2VyLmNvbXBvbmVudCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvcHVwQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE9uSW5pdCB7XHJcbiAgICBwcml2YXRlIE1hcFNlcnZpY2U7XHJcbiAgICBjbG9zZUJ1dHRvbj86IGJvb2xlYW47XHJcbiAgICBjbG9zZU9uQ2xpY2s/OiBib29sZWFuO1xyXG4gICAgYW5jaG9yPzogJ3RvcCcgfCAnYm90dG9tJyB8ICdsZWZ0JyB8ICdyaWdodCcgfCAndG9wLWxlZnQnIHwgJ3RvcC1yaWdodCcgfCAnYm90dG9tLWxlZnQnO1xyXG4gICAgb2Zmc2V0PzogbnVtYmVyIHwgUG9pbnRMaWtlIHwge1xyXG4gICAgICAgIFthbmNob3I6IHN0cmluZ106IFtudW1iZXIsIG51bWJlcl07XHJcbiAgICB9O1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgbWF4V2lkdGg/OiBzdHJpbmc7XHJcbiAgICBmZWF0dXJlPzogR2VvSlNPTi5GZWF0dXJlPEdlb0pTT04uUG9pbnQ+O1xyXG4gICAgbG5nTGF0PzogTG5nTGF0TGlrZTtcclxuICAgIG1hcmtlcj86IE1hcmtlckNvbXBvbmVudDtcclxuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICBvcGVuOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICBjb250ZW50OiBFbGVtZW50UmVmO1xyXG4gICAgcG9wdXBJbnN0YW5jZT86IFBvcHVwO1xyXG4gICAgY29uc3RydWN0b3IoTWFwU2VydmljZTogTWFwU2VydmljZSk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNyZWF0ZVBvcHVwO1xyXG4gICAgcHJpdmF0ZSBhZGRQb3B1cDtcclxufVxyXG4iXX0=