/**
 * @fileoverview added by tsickle
 * Generated from: lib/markers-for-clusters/markers-for-clusters.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, Input, NgZone, TemplateRef } from '@angular/core';
import { fromEvent, merge, Subscription } from 'rxjs';
import { filter, startWith, switchMap } from 'rxjs/operators';
import { MapService } from '../map/map.service';
var PointDirective = /** @class */ (function () {
    function PointDirective() {
    }
    PointDirective.decorators = [
        { type: Directive, args: [{ selector: 'ng-template[mglPoint]' },] }
    ];
    return PointDirective;
}());
export { PointDirective };
var ClusterPointDirective = /** @class */ (function () {
    function ClusterPointDirective() {
    }
    ClusterPointDirective.decorators = [
        { type: Directive, args: [{ selector: 'ng-template[mglClusterPoint]' },] }
    ];
    return ClusterPointDirective;
}());
export { ClusterPointDirective };
/** @type {?} */
var uniqId = 0;
var MarkersForClustersComponent = /** @class */ (function () {
    function MarkersForClustersComponent(MapService, ChangeDetectorRef, zone) {
        this.MapService = MapService;
        this.ChangeDetectorRef = ChangeDetectorRef;
        this.zone = zone;
        // Incorrect typings
        this.layerId = "mgl-markers-for-clusters-" + uniqId++;
        this.sub = new Subscription();
    }
    /**
     * @return {?}
     */
    MarkersForClustersComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var clusterDataUpdate = (/**
         * @return {?}
         */
        function () {
            return fromEvent((/** @type {?} */ (_this.MapService.mapInstance)), 'data').pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                return e.sourceId === _this.source &&
                    e.sourceDataType !== 'metadata' &&
                    _this.MapService.mapInstance.isSourceLoaded(_this.source);
            })));
        });
        /** @type {?} */
        var sub = this.MapService.mapCreated$
            .pipe(switchMap(clusterDataUpdate), switchMap((/**
         * @return {?}
         */
        function () {
            return merge(fromEvent((/** @type {?} */ (_this.MapService.mapInstance)), 'move'), fromEvent((/** @type {?} */ (_this.MapService.mapInstance)), 'moveend')).pipe(startWith(undefined));
        })))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.zone.run((/**
             * @return {?}
             */
            function () {
                _this.updateCluster();
            }));
        }));
        this.sub.add(sub);
    };
    /**
     * @return {?}
     */
    MarkersForClustersComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.sub.unsubscribe();
    };
    /**
     * @param {?} _index
     * @param {?} clusterPoint
     * @return {?}
     */
    MarkersForClustersComponent.prototype.trackByClusterPoint = /**
     * @param {?} _index
     * @param {?} clusterPoint
     * @return {?}
     */
    function (_index, clusterPoint) {
        return clusterPoint.id;
    };
    /**
     * @private
     * @return {?}
     */
    MarkersForClustersComponent.prototype.updateCluster = /**
     * @private
     * @return {?}
     */
    function () {
        // Invalid queryRenderedFeatures typing
        /** @type {?} */
        var params = { layers: [this.layerId] };
        if (!this.pointTpl) {
            params.filter = ['==', 'cluster', true];
        }
        this.clusterPoints = this.MapService.mapInstance.queryRenderedFeatures(params);
        this.ChangeDetectorRef.markForCheck();
    };
    MarkersForClustersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-markers-for-clusters',
                    template: "\n    <mgl-layer [id]=\"layerId\" [source]=\"source\" type=\"circle\" [paint]=\"{ 'circle-radius': 0 }\"></mgl-layer>\n    <ng-container *ngFor=\"let feature of clusterPoints; trackBy: trackByClusterPoint\">\n      <ng-container *ngIf=\"feature.properties.cluster\">\n        <mgl-marker [feature]=\"feature\">\n          <ng-container *ngTemplateOutlet=\"clusterPointTpl; context: { $implicit: feature }\"></ng-container>\n        </mgl-marker>\n      </ng-container>\n      <ng-container *ngIf=\"!feature.properties.cluster\">\n        <mgl-marker [feature]=\"feature\">\n          <ng-container *ngTemplateOutlet=\"pointTpl; context: { $implicit: feature }\"></ng-container>\n        </mgl-marker>\n      </ng-container>\n    </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false
                }] }
    ];
    /** @nocollapse */
    MarkersForClustersComponent.ctorParameters = function () { return [
        { type: MapService },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    MarkersForClustersComponent.propDecorators = {
        source: [{ type: Input }],
        pointTpl: [{ type: ContentChild, args: [PointDirective, { read: TemplateRef, static: false },] }],
        clusterPointTpl: [{ type: ContentChild, args: [ClusterPointDirective, { read: TemplateRef, static: false },] }]
    };
    return MarkersForClustersComponent;
}());
export { MarkersForClustersComponent };
if (false) {
    /** @type {?} */
    MarkersForClustersComponent.prototype.source;
    /** @type {?} */
    MarkersForClustersComponent.prototype.pointTpl;
    /** @type {?} */
    MarkersForClustersComponent.prototype.clusterPointTpl;
    /** @type {?} */
    MarkersForClustersComponent.prototype.clusterPoints;
    /** @type {?} */
    MarkersForClustersComponent.prototype.layerId;
    /**
     * @type {?}
     * @private
     */
    MarkersForClustersComponent.prototype.sub;
    /**
     * @type {?}
     * @private
     */
    MarkersForClustersComponent.prototype.MapService;
    /**
     * @type {?}
     * @private
     */
    MarkersForClustersComponent.prototype.ChangeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    MarkersForClustersComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,