/**
 * @fileoverview added by tsickle
 * Generated from: lib/map/map.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, InjectionToken, NgZone, Optional } from '@angular/core';
import * as MapboxGl from 'mapbox-gl';
import { AsyncSubject, Subscription } from 'rxjs';
import { first } from 'rxjs/operators';
/** @type {?} */
export var MAPBOX_API_KEY = new InjectionToken('MapboxApiKey');
/**
 * @abstract
 */
var /**
 * @abstract
 */
MglResizeEventEmitter = /** @class */ (function () {
    function MglResizeEventEmitter() {
    }
    return MglResizeEventEmitter;
}());
/**
 * @abstract
 */
export { MglResizeEventEmitter };
if (false) {
    /** @type {?} */
    MglResizeEventEmitter.prototype.resizeEvent;
}
/**
 * @record
 */
export function SetupMap() { }
if (false) {
    /** @type {?|undefined} */
    SetupMap.prototype.accessToken;
    /** @type {?|undefined} */
    SetupMap.prototype.customMapboxApiUrl;
    /** @type {?} */
    SetupMap.prototype.mapOptions;
    /** @type {?} */
    SetupMap.prototype.mapEvents;
}
/**
 * @record
 */
export function SetupLayer() { }
if (false) {
    /** @type {?} */
    SetupLayer.prototype.layerOptions;
    /** @type {?} */
    SetupLayer.prototype.layerEvents;
}
/**
 * @record
 */
export function SetupPopup() { }
if (false) {
    /** @type {?} */
    SetupPopup.prototype.popupOptions;
    /** @type {?} */
    SetupPopup.prototype.popupEvents;
}
/**
 * @record
 */
export function SetupMarker() { }
if (false) {
    /** @type {?} */
    SetupMarker.prototype.markersOptions;
    /** @type {?} */
    SetupMarker.prototype.markersEvents;
}
var MapService = /** @class */ (function () {
    function MapService(zone, MAPBOX_API_KEY, MglResizeEventEmitter) {
        this.zone = zone;
        this.MAPBOX_API_KEY = MAPBOX_API_KEY;
        this.MglResizeEventEmitter = MglResizeEventEmitter;
        this.mapCreated = new AsyncSubject();
        this.mapLoaded = new AsyncSubject();
        this.layerIdsToRemove = [];
        this.sourceIdsToRemove = [];
        this.markersToRemove = [];
        this.popupsToRemove = [];
        this.imageIdsToRemove = [];
        this.subscription = new Subscription();
        this.mapCreated$ = this.mapCreated.asObservable();
        this.mapLoaded$ = this.mapLoaded.asObservable();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    MapService.prototype.setup = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        // Need onStable to wait for a potential @angular/route transition to end
        this.zone.onStable.pipe(first()).subscribe((/**
         * @return {?}
         */
        function () {
            // Workaround rollup issue
            _this.assign(MapboxGl, 'accessToken', options.accessToken || _this.MAPBOX_API_KEY);
            if (options.customMapboxApiUrl) {
                _this.assign(MapboxGl, 'config.API_URL', options.customMapboxApiUrl);
            }
            _this.createMap(options.mapOptions);
            _this.hookEvents(options.mapEvents);
            _this.mapEvents = options.mapEvents;
            _this.mapCreated.next(undefined);
            _this.mapCreated.complete();
        }));
    };
    /**
     * @return {?}
     */
    MapService.prototype.destroyMap = /**
     * @return {?}
     */
    function () {
        if (this.mapInstance) {
            this.subscription.unsubscribe();
            this.mapInstance.remove();
        }
    };
    /**
     * @param {?} minZoom
     * @return {?}
     */
    MapService.prototype.updateMinZoom = /**
     * @param {?} minZoom
     * @return {?}
     */
    function (minZoom) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.setMinZoom(minZoom);
        }));
    };
    /**
     * @param {?} maxZoom
     * @return {?}
     */
    MapService.prototype.updateMaxZoom = /**
     * @param {?} maxZoom
     * @return {?}
     */
    function (maxZoom) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.setMaxZoom(maxZoom);
        }));
    };
    /**
     * @param {?} status
     * @return {?}
     */
    MapService.prototype.updateScrollZoom = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            status ? _this.mapInstance.scrollZoom.enable() : _this.mapInstance.scrollZoom.disable();
        }));
    };
    /**
     * @param {?} status
     * @return {?}
     */
    MapService.prototype.updateDragRotate = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            status ? _this.mapInstance.dragRotate.enable() : _this.mapInstance.dragRotate.disable();
        }));
    };
    /**
     * @param {?} status
     * @return {?}
     */
    MapService.prototype.updateTouchZoomRotate = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            status ? _this.mapInstance.touchZoomRotate.enable() : _this.mapInstance.touchZoomRotate.disable();
        }));
    };
    /**
     * @param {?} status
     * @return {?}
     */
    MapService.prototype.updateDoubleClickZoom = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            status ? _this.mapInstance.doubleClickZoom.enable() : _this.mapInstance.doubleClickZoom.disable();
        }));
    };
    /**
     * @param {?} status
     * @return {?}
     */
    MapService.prototype.updateKeyboard = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            status ? _this.mapInstance.keyboard.enable() : _this.mapInstance.keyboard.disable();
        }));
    };
    /**
     * @param {?} status
     * @return {?}
     */
    MapService.prototype.updateDragPan = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            status ? _this.mapInstance.dragPan.enable() : _this.mapInstance.dragPan.disable();
        }));
    };
    /**
     * @param {?} status
     * @return {?}
     */
    MapService.prototype.updateBoxZoom = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            status ? _this.mapInstance.boxZoom.enable() : _this.mapInstance.boxZoom.disable();
        }));
    };
    /**
     * @param {?} style
     * @return {?}
     */
    MapService.prototype.updateStyle = /**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.setStyle(style);
        }));
    };
    /**
     * @param {?} maxBounds
     * @return {?}
     */
    MapService.prototype.updateMaxBounds = /**
     * @param {?} maxBounds
     * @return {?}
     */
    function (maxBounds) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.setMaxBounds(maxBounds);
        }));
    };
    /**
     * @param {?} cursor
     * @return {?}
     */
    MapService.prototype.changeCanvasCursor = /**
     * @param {?} cursor
     * @return {?}
     */
    function (cursor) {
        /** @type {?} */
        var canvas = this.mapInstance.getCanvasContainer();
        canvas.style.cursor = cursor;
    };
    /**
     * @param {?=} pointOrBox
     * @param {?=} parameters
     * @return {?}
     */
    MapService.prototype.queryRenderedFeatures = /**
     * @param {?=} pointOrBox
     * @param {?=} parameters
     * @return {?}
     */
    function (pointOrBox, parameters) {
        return this.mapInstance.queryRenderedFeatures(pointOrBox, parameters);
    };
    /**
     * @param {?} center
     * @param {?=} options
     * @return {?}
     */
    MapService.prototype.panTo = /**
     * @param {?} center
     * @param {?=} options
     * @return {?}
     */
    function (center, options) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.panTo(center, options);
        }));
    };
    /**
     * @param {?} movingMethod
     * @param {?=} movingOptions
     * @param {?=} zoom
     * @param {?=} center
     * @param {?=} bearing
     * @param {?=} pitch
     * @return {?}
     */
    MapService.prototype.move = /**
     * @param {?} movingMethod
     * @param {?=} movingOptions
     * @param {?=} zoom
     * @param {?=} center
     * @param {?=} bearing
     * @param {?=} pitch
     * @return {?}
     */
    function (movingMethod, movingOptions, zoom, center, bearing, pitch) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            ((/** @type {?} */ (_this.mapInstance[movingMethod])))(tslib_1.__assign({}, movingOptions, { zoom: zoom ? zoom : _this.mapInstance.getZoom(), center: center ? center : _this.mapInstance.getCenter(), bearing: bearing ? bearing : _this.mapInstance.getBearing(), pitch: pitch ? pitch : _this.mapInstance.getPitch() }));
        }));
    };
    /**
     * @param {?} layer
     * @param {?} bindEvents
     * @param {?=} before
     * @return {?}
     */
    MapService.prototype.addLayer = /**
     * @param {?} layer
     * @param {?} bindEvents
     * @param {?=} before
     * @return {?}
     */
    function (layer, bindEvents, before) {
        var _this = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            Object.keys(layer.layerOptions).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var tkey = (/** @type {?} */ (key));
                if (layer.layerOptions[tkey] === undefined) {
                    delete layer.layerOptions[tkey];
                }
            }));
            _this.mapInstance.addLayer(layer.layerOptions, before);
            if (bindEvents) {
                if (layer.layerEvents.click.observers.length) {
                    _this.mapInstance.on('click', layer.layerOptions.id, (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    function (evt) {
                        _this.zone.run((/**
                         * @return {?}
                         */
                        function () {
                            layer.layerEvents.click.emit(evt);
                        }));
                    }));
                }
                if (layer.layerEvents.mouseEnter.observers.length) {
                    _this.mapInstance.on('mouseenter', layer.layerOptions.id, (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    function (evt) {
                        _this.zone.run((/**
                         * @return {?}
                         */
                        function () {
                            layer.layerEvents.mouseEnter.emit(evt);
                        }));
                    }));
                }
                if (layer.layerEvents.mouseLeave.observers.length) {
                    _this.mapInstance.on('mouseleave', layer.layerOptions.id, (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    function (evt) {
                        _this.zone.run((/**
                         * @return {?}
                         */
                        function () {
                            layer.layerEvents.mouseLeave.emit(evt);
                        }));
                    }));
                }
                if (layer.layerEvents.mouseMove.observers.length) {
                    _this.mapInstance.on('mousemove', layer.layerOptions.id, (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    function (evt) {
                        _this.zone.run((/**
                         * @return {?}
                         */
                        function () {
                            layer.layerEvents.mouseMove.emit(evt);
                        }));
                    }));
                }
            }
        }));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    MapService.prototype.removeLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        this.layerIdsToRemove.push(layerId);
    };
    /**
     * @param {?} marker
     * @return {?}
     */
    MapService.prototype.addMarker = /**
     * @param {?} marker
     * @return {?}
     */
    function (marker) {
        var _this = this;
        /** @type {?} */
        var options = {
            offset: marker.markersOptions.offset,
            anchor: marker.markersOptions.anchor,
            draggable: !!marker.markersOptions.draggable
        };
        if (marker.markersOptions.element.childNodes.length > 0) {
            options.element = marker.markersOptions.element;
        }
        /** @type {?} */
        var markerInstance = new MapboxGl.Marker(options);
        if (marker.markersEvents.dragStart.observers.length) {
            markerInstance.on('dragstart', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return marker.markersEvents.dragStart.emit(event.target); }));
            }));
        }
        if (marker.markersEvents.drag.observers.length) {
            markerInstance.on('drag', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return marker.markersEvents.drag.emit(event.target); }));
            }));
        }
        if (marker.markersEvents.dragEnd.observers.length) {
            markerInstance.on('dragend', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return marker.markersEvents.dragEnd.emit(event.target); }));
            }));
        }
        /** @type {?} */
        var lngLat = marker.markersOptions.feature
            ? (/** @type {?} */ ((/** @type {?} */ (marker.markersOptions.feature.geometry)).coordinates))
            : (/** @type {?} */ (marker.markersOptions.lngLat));
        markerInstance.setLngLat(lngLat);
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            markerInstance.addTo(_this.mapInstance);
            return markerInstance;
        }));
    };
    /**
     * @param {?} marker
     * @return {?}
     */
    MapService.prototype.removeMarker = /**
     * @param {?} marker
     * @return {?}
     */
    function (marker) {
        this.markersToRemove.push(marker);
    };
    /**
     * @param {?} popup
     * @param {?} element
     * @return {?}
     */
    MapService.prototype.createPopup = /**
     * @param {?} popup
     * @param {?} element
     * @return {?}
     */
    function (popup, element) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            Object.keys(popup.popupOptions).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) { return ((/** @type {?} */ (popup.popupOptions)))[key] === undefined && delete ((/** @type {?} */ (popup.popupOptions)))[key]; }));
            /** @type {?} */
            var popupInstance = new MapboxGl.Popup(popup.popupOptions);
            popupInstance.setDOMContent(element);
            if (popup.popupEvents.close.observers.length) {
                popupInstance.on('close', (/**
                 * @return {?}
                 */
                function () {
                    _this.zone.run((/**
                     * @return {?}
                     */
                    function () {
                        popup.popupEvents.close.emit();
                    }));
                }));
            }
            if (popup.popupEvents.open.observers.length) {
                popupInstance.on('open', (/**
                 * @return {?}
                 */
                function () {
                    _this.zone.run((/**
                     * @return {?}
                     */
                    function () {
                        popup.popupEvents.open.emit();
                    }));
                }));
            }
            return popupInstance;
        }));
    };
    /**
     * @param {?} popup
     * @param {?} lngLat
     * @param {?=} skipOpenEvent
     * @return {?}
     */
    MapService.prototype.addPopupToMap = /**
     * @param {?} popup
     * @param {?} lngLat
     * @param {?=} skipOpenEvent
     * @return {?}
     */
    function (popup, lngLat, skipOpenEvent) {
        var _this = this;
        if (skipOpenEvent === void 0) { skipOpenEvent = false; }
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (skipOpenEvent && ((/** @type {?} */ (popup)))._listeners) {
                delete ((/** @type {?} */ (popup)))._listeners['open'];
            }
            popup.setLngLat(lngLat);
            popup.addTo(_this.mapInstance);
        }));
    };
    /**
     * @param {?} marker
     * @param {?} popup
     * @return {?}
     */
    MapService.prototype.addPopupToMarker = /**
     * @param {?} marker
     * @param {?} popup
     * @return {?}
     */
    function (marker, popup) {
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            marker.setPopup(popup);
        }));
    };
    /**
     * @param {?} popup
     * @param {?=} skipCloseEvent
     * @return {?}
     */
    MapService.prototype.removePopupFromMap = /**
     * @param {?} popup
     * @param {?=} skipCloseEvent
     * @return {?}
     */
    function (popup, skipCloseEvent) {
        if (skipCloseEvent === void 0) { skipCloseEvent = false; }
        if (skipCloseEvent && ((/** @type {?} */ (popup)))._listeners) {
            delete ((/** @type {?} */ (popup)))._listeners['close'];
        }
        this.popupsToRemove.push(popup);
    };
    /**
     * @param {?} marker
     * @return {?}
     */
    MapService.prototype.removePopupFromMarker = /**
     * @param {?} marker
     * @return {?}
     */
    function (marker) {
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            marker.setPopup(undefined);
        }));
    };
    /**
     * @param {?} control
     * @param {?=} position
     * @return {?}
     */
    MapService.prototype.addControl = /**
     * @param {?} control
     * @param {?=} position
     * @return {?}
     */
    function (control, position) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.addControl((/** @type {?} */ (control)), position);
        }));
    };
    /**
     * @param {?} control
     * @return {?}
     */
    MapService.prototype.removeControl = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.removeControl((/** @type {?} */ (control)));
        }));
    };
    /**
     * @param {?} imageId
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    MapService.prototype.loadAndAddImage = /**
     * @param {?} imageId
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (imageId, url, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.zone.runOutsideAngular((/**
                     * @return {?}
                     */
                    function () {
                        return new Promise((/**
                         * @param {?} resolve
                         * @param {?} reject
                         * @return {?}
                         */
                        function (resolve, reject) {
                            _this.mapInstance.loadImage(url, (/**
                             * @param {?} error
                             * @param {?} image
                             * @return {?}
                             */
                            function (error, image) {
                                if (error) {
                                    reject(error);
                                    return;
                                }
                                _this.addImage(imageId, image, options);
                                resolve();
                            }));
                        }));
                    }))];
            });
        });
    };
    /**
     * @param {?} imageId
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    MapService.prototype.addImage = /**
     * @param {?} imageId
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (imageId, data, options) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.addImage(imageId, (/** @type {?} */ (data)), options);
        }));
    };
    /**
     * @param {?} imageId
     * @return {?}
     */
    MapService.prototype.removeImage = /**
     * @param {?} imageId
     * @return {?}
     */
    function (imageId) {
        this.imageIdsToRemove.push(imageId);
    };
    /**
     * @param {?} sourceId
     * @param {?} source
     * @return {?}
     */
    MapService.prototype.addSource = /**
     * @param {?} sourceId
     * @param {?} source
     * @return {?}
     */
    function (sourceId, source) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            Object.keys(source).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) { return ((/** @type {?} */ (source)))[key] === undefined && delete ((/** @type {?} */ (source)))[key]; }));
            _this.mapInstance.addSource(sourceId, source);
        }));
    };
    /**
     * @template T
     * @param {?} sourceId
     * @return {?}
     */
    MapService.prototype.getSource = /**
     * @template T
     * @param {?} sourceId
     * @return {?}
     */
    function (sourceId) {
        return (/** @type {?} */ (((/** @type {?} */ (this.mapInstance.getSource(sourceId))))));
    };
    /**
     * @param {?} sourceId
     * @return {?}
     */
    MapService.prototype.removeSource = /**
     * @param {?} sourceId
     * @return {?}
     */
    function (sourceId) {
        this.sourceIdsToRemove.push(sourceId);
    };
    /**
     * @param {?} layerId
     * @param {?} paint
     * @return {?}
     */
    MapService.prototype.setAllLayerPaintProperty = /**
     * @param {?} layerId
     * @param {?} paint
     * @return {?}
     */
    function (layerId, paint) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            Object.keys(paint).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                // TODO Check for perf, setPaintProperty only on changed paint props maybe
                _this.mapInstance.setPaintProperty(layerId, key, ((/** @type {?} */ (paint)))[key]);
            }));
        }));
    };
    /**
     * @param {?} layerId
     * @param {?} layout
     * @return {?}
     */
    MapService.prototype.setAllLayerLayoutProperty = /**
     * @param {?} layerId
     * @param {?} layout
     * @return {?}
     */
    function (layerId, layout) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            Object.keys(layout).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                // TODO Check for perf, setPaintProperty only on changed paint props maybe
                _this.mapInstance.setLayoutProperty(layerId, key, ((/** @type {?} */ (layout)))[key]);
            }));
        }));
    };
    /**
     * @param {?} layerId
     * @param {?} filter
     * @return {?}
     */
    MapService.prototype.setLayerFilter = /**
     * @param {?} layerId
     * @param {?} filter
     * @return {?}
     */
    function (layerId, filter) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.setFilter(layerId, filter);
        }));
    };
    /**
     * @param {?} layerId
     * @param {?} beforeId
     * @return {?}
     */
    MapService.prototype.setLayerBefore = /**
     * @param {?} layerId
     * @param {?} beforeId
     * @return {?}
     */
    function (layerId, beforeId) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.moveLayer(layerId, beforeId);
        }));
    };
    /**
     * @param {?} layerId
     * @param {?=} minZoom
     * @param {?=} maxZoom
     * @return {?}
     */
    MapService.prototype.setLayerZoomRange = /**
     * @param {?} layerId
     * @param {?=} minZoom
     * @param {?=} maxZoom
     * @return {?}
     */
    function (layerId, minZoom, maxZoom) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.setLayerZoomRange(layerId, minZoom ? minZoom : 0, maxZoom ? maxZoom : 20);
        }));
    };
    /**
     * @param {?} bounds
     * @param {?=} options
     * @return {?}
     */
    MapService.prototype.fitBounds = /**
     * @param {?} bounds
     * @param {?=} options
     * @return {?}
     */
    function (bounds, options) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.fitBounds(bounds, options);
        }));
    };
    /**
     * @param {?} points
     * @param {?} bearing
     * @param {?=} options
     * @return {?}
     */
    MapService.prototype.fitScreenCoordinates = /**
     * @param {?} points
     * @param {?} bearing
     * @param {?=} options
     * @return {?}
     */
    function (points, bearing, options) {
        var _this = this;
        return this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.mapInstance.fitScreenCoordinates(points[0], points[1], bearing, options);
        }));
    };
    /**
     * @return {?}
     */
    MapService.prototype.applyChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.removeLayers();
            _this.removeSources();
            _this.removeMarkers();
            _this.removePopups();
            _this.removeImages();
        }));
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    MapService.prototype.createMap = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        NgZone.assertNotInAngularZone();
        Object.keys(options).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var tkey = (/** @type {?} */ (key));
            if (options[tkey] === undefined) {
                delete options[tkey];
            }
        }));
        this.mapInstance = new MapboxGl.Map(options);
        /** @type {?} */
        var isIEorEdge = window && /msie\s|trident\/|edge\//i.test(window.navigator.userAgent);
        if (isIEorEdge) {
            this.mapInstance.setStyle((/** @type {?} */ (options.style)));
        }
        /** @type {?} */
        var subChanges = this.zone.onMicrotaskEmpty.subscribe((/**
         * @return {?}
         */
        function () { return _this.applyChanges(); }));
        if (this.MglResizeEventEmitter) {
            /** @type {?} */
            var subResize = this.MglResizeEventEmitter.resizeEvent.subscribe((/**
             * @return {?}
             */
            function () {
                _this.mapInstance.resize();
            }));
            this.subscription.add(subResize);
        }
        this.subscription.add(subChanges);
    };
    /**
     * @private
     * @return {?}
     */
    MapService.prototype.removeLayers = /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.layerIdsToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                var layerId = _c.value;
                this.mapInstance.removeLayer(layerId);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.layerIdsToRemove = [];
    };
    /**
     * @private
     * @return {?}
     */
    MapService.prototype.removeSources = /**
     * @private
     * @return {?}
     */
    function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.sourceIdsToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                var sourceId = _c.value;
                this.mapInstance.removeSource(sourceId);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.sourceIdsToRemove = [];
    };
    /**
     * @private
     * @return {?}
     */
    MapService.prototype.removeMarkers = /**
     * @private
     * @return {?}
     */
    function () {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(this.markersToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                var marker = _c.value;
                marker.remove();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.markersToRemove = [];
    };
    /**
     * @private
     * @return {?}
     */
    MapService.prototype.removePopups = /**
     * @private
     * @return {?}
     */
    function () {
        var e_4, _a;
        try {
            for (var _b = tslib_1.__values(this.popupsToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                var popup = _c.value;
                popup.remove();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.popupsToRemove = [];
    };
    /**
     * @private
     * @return {?}
     */
    MapService.prototype.removeImages = /**
     * @private
     * @return {?}
     */
    function () {
        var e_5, _a;
        try {
            for (var _b = tslib_1.__values(this.imageIdsToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                var imageId = _c.value;
                this.mapInstance.removeImage(imageId);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        this.imageIdsToRemove = [];
    };
    /**
     * @private
     * @param {?} events
     * @return {?}
     */
    MapService.prototype.hookEvents = /**
     * @private
     * @param {?} events
     * @return {?}
     */
    function (events) {
        var _this = this;
        this.mapInstance.on('load', (/**
         * @return {?}
         */
        function () {
            _this.mapLoaded.next(undefined);
            _this.mapLoaded.complete();
            _this.zone.run((/**
             * @return {?}
             */
            function () { return events.load.emit(_this.mapInstance); }));
        }));
        if (events.resize.observers.length) {
            this.mapInstance.on('resize', (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.resize.emit(); })); }));
        }
        if (events.remove.observers.length) {
            this.mapInstance.on('remove', (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.remove.emit(); })); }));
        }
        if (events.mouseDown.observers.length) {
            this.mapInstance.on('mousedown', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.mouseDown.emit(evt); }));
            }));
        }
        if (events.mouseUp.observers.length) {
            this.mapInstance.on('mouseup', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.mouseUp.emit(evt); })); }));
        }
        if (events.mouseMove.observers.length) {
            this.mapInstance.on('mousemove', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.mouseMove.emit(evt); }));
            }));
        }
        if (events.click.observers.length) {
            this.mapInstance.on('click', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.click.emit(evt); })); }));
        }
        if (events.dblClick.observers.length) {
            this.mapInstance.on('dblclick', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.dblClick.emit(evt); })); }));
        }
        if (events.mouseEnter.observers.length) {
            this.mapInstance.on('mouseenter', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.mouseEnter.emit(evt); }));
            }));
        }
        if (events.mouseLeave.observers.length) {
            this.mapInstance.on('mouseleave', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.mouseLeave.emit(evt); }));
            }));
        }
        if (events.mouseOver.observers.length) {
            this.mapInstance.on('mouseover', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.mouseOver.emit(evt); }));
            }));
        }
        if (events.mouseOut.observers.length) {
            this.mapInstance.on('mouseout', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.mouseOut.emit(evt); })); }));
        }
        if (events.contextMenu.observers.length) {
            this.mapInstance.on('contextmenu', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.contextMenu.emit(evt); }));
            }));
        }
        if (events.touchStart.observers.length) {
            this.mapInstance.on('touchstart', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.touchStart.emit(evt); }));
            }));
        }
        if (events.touchEnd.observers.length) {
            this.mapInstance.on('touchend', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.touchEnd.emit(evt); })); }));
        }
        if (events.touchMove.observers.length) {
            this.mapInstance.on('touchmove', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.touchMove.emit(evt); }));
            }));
        }
        if (events.touchCancel.observers.length) {
            this.mapInstance.on('touchcancel', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.touchCancel.emit(evt); }));
            }));
        }
        if (events.wheel.observers.length) {
            // MapboxGl.MapWheelEvent
            this.mapInstance.on('wheel', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.wheel.emit(evt); })); }));
        }
        if (events.moveStart.observers.length) {
            this.mapInstance.on('movestart', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.moveStart.emit(evt); })); }));
        }
        if (events.move.observers.length) {
            this.mapInstance.on('move', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.move.emit(evt); }));
            }));
        }
        if (events.moveEnd.observers.length) {
            this.mapInstance.on('moveend', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.moveEnd.emit(evt); })); }));
        }
        if (events.dragStart.observers.length) {
            this.mapInstance.on('dragstart', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.dragStart.emit(evt); })); }));
        }
        if (events.drag.observers.length) {
            this.mapInstance.on('drag', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.drag.emit(evt); }));
            }));
        }
        if (events.dragEnd.observers.length) {
            this.mapInstance.on('dragend', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.dragEnd.emit(evt); })); }));
        }
        if (events.zoomStart.observers.length) {
            this.mapInstance.on('zoomstart', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.zoomStart.emit(evt); }));
            }));
        }
        if (events.zoomEvt.observers.length) {
            this.mapInstance.on('zoom', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.zoomEvt.emit(evt); }));
            }));
        }
        if (events.zoomEnd.observers.length) {
            this.mapInstance.on('zoomend', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.zoomEnd.emit(evt); }));
            }));
        }
        if (events.rotateStart.observers.length) {
            this.mapInstance.on('rotatestart', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.rotateStart.emit(evt); }));
            }));
        }
        if (events.rotate.observers.length) {
            this.mapInstance.on('rotate', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.rotate.emit(evt); }));
            }));
        }
        if (events.rotateEnd.observers.length) {
            this.mapInstance.on('rotateend', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.rotateEnd.emit(evt); }));
            }));
        }
        if (events.pitchStart.observers.length) {
            this.mapInstance.on('pitchstart', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.pitchStart.emit(evt); })); }));
        }
        if (events.pitchEvt.observers.length) {
            this.mapInstance.on('pitch', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.pitchEvt.emit(evt); })); }));
        }
        if (events.pitchEnd.observers.length) {
            this.mapInstance.on('pitchend', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.pitchEnd.emit(evt); })); }));
        }
        if (events.boxZoomStart.observers.length) {
            this.mapInstance.on('boxzoomstart', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.boxZoomStart.emit(evt); }));
            }));
        }
        if (events.boxZoomEnd.observers.length) {
            this.mapInstance.on('boxzoomend', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.boxZoomEnd.emit(evt); }));
            }));
        }
        if (events.boxZoomCancel.observers.length) {
            this.mapInstance.on('boxzoomcancel', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.boxZoomCancel.emit(evt); }));
            }));
        }
        if (events.webGlContextLost.observers.length) {
            this.mapInstance.on('webglcontextlost', (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.webGlContextLost.emit(); })); }));
        }
        if (events.webGlContextRestored.observers.length) {
            this.mapInstance.on('webglcontextrestored', (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.webGlContextRestored.emit(); })); }));
        }
        if (events.render.observers.length) {
            this.mapInstance.on('render', (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.render.emit(); })); }));
        }
        if (events.error.observers.length) {
            this.mapInstance.on('error', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.error.emit(evt); })); }));
        }
        if (events.data.observers.length) {
            this.mapInstance.on('data', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.data.emit(evt); })); }));
        }
        if (events.styleData.observers.length) {
            this.mapInstance.on('styledata', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.styleData.emit(evt); })); }));
        }
        if (events.sourceData.observers.length) {
            this.mapInstance.on('sourcedata', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.sourceData.emit(evt); })); }));
        }
        if (events.dataLoading.observers.length) {
            this.mapInstance.on('dataloading', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.dataLoading.emit(evt); }));
            }));
        }
        if (events.styleDataLoading.observers.length) {
            this.mapInstance.on('styledataloading', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.styleDataLoading.emit(evt); }));
            }));
        }
        if (events.sourceDataLoading.observers.length) {
            this.mapInstance.on('sourcedataloading', (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.sourceDataLoading.emit(evt); }));
            }));
        }
        if (events.styleImageMissing.observers.length) {
            this.mapInstance.on((/** @type {?} */ ('styleimagemissing')), (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                return _this.zone.run((/**
                 * @return {?}
                 */
                function () { return events.styleImageMissing.emit(evt); }));
            }));
        }
        if (events.idle.observers.length) {
            this.mapInstance.on('idle', (/**
             * @return {?}
             */
            function () { return _this.zone.run((/**
             * @return {?}
             */
            function () { return events.idle.emit(); })); }));
        }
    };
    // TODO move this elsewhere
    // TODO move this elsewhere
    /**
     * @private
     * @param {?} obj
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    MapService.prototype.assign = 
    // TODO move this elsewhere
    /**
     * @private
     * @param {?} obj
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    function (obj, prop, value) {
        if (typeof prop === 'string') {
            // tslint:disable-next-line:no-parameter-reassignment
            prop = prop.split('.');
        }
        if (prop.length > 1) {
            /** @type {?} */
            var e = prop.shift();
            this.assign((obj[e] = Object.prototype.toString.call(obj[e]) === '[object Object]' ? obj[e] : {}), prop, value);
        }
        else {
            obj[prop[0]] = value;
        }
    };
    MapService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MapService.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAPBOX_API_KEY,] }] },
        { type: MglResizeEventEmitter, decorators: [{ type: Optional }] }
    ]; };
    return MapService;
}());
export { MapService };
if (false) {
    /** @type {?} */
    MapService.prototype.mapInstance;
    /** @type {?} */
    MapService.prototype.mapCreated$;
    /** @type {?} */
    MapService.prototype.mapLoaded$;
    /** @type {?} */
    MapService.prototype.mapEvents;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.mapCreated;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.mapLoaded;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.layerIdsToRemove;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.sourceIdsToRemove;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.markersToRemove;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.popupsToRemove;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.imageIdsToRemove;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.MAPBOX_API_KEY;
    /**
     * @type {?}
     * @private
     */
    MapService.prototype.MglResizeEventEmitter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWFwYm94LWdsLyIsInNvdXJjZXMiOlsibGliL21hcC9tYXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWdCLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxLQUFLLFFBQVEsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFFLFlBQVksRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUd2QyxNQUFNLEtBQU8sY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLGNBQWMsQ0FBQzs7OztBQUVoRTs7OztJQUFBO0lBRUEsQ0FBQztJQUFELDRCQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7Ozs7Ozs7SUFEQyw0Q0FBdUM7Ozs7O0FBR3pDLDhCQUtDOzs7SUFKQywrQkFBcUI7O0lBQ3JCLHNDQUE0Qjs7SUFDNUIsOEJBQWdCOztJQUNoQiw2QkFBb0I7Ozs7O0FBR3RCLGdDQVFDOzs7SUFQQyxrQ0FBNkI7O0lBQzdCLGlDQUtFOzs7OztBQUdKLGdDQU1DOzs7SUFMQyxrQ0FBb0M7O0lBQ3BDLGlDQUdFOzs7OztBQUdKLGlDQWNDOzs7SUFiQyxxQ0FPRTs7SUFDRixvQ0FJRTs7QUFRSjtJQWdCRSxvQkFDVSxJQUFZLEVBQ2lDLGNBQXNCLEVBQzlDLHFCQUE0QztRQUZqRSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ2lDLG1CQUFjLEdBQWQsY0FBYyxDQUFRO1FBQzlDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFabkUsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDdEMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDckMscUJBQWdCLEdBQWEsRUFB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QUNyRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QjtRQUNELElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O2dCQUNiLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNqSDthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUN0QjtJQUNILENBQUM7O2dCQXpyQkYsVUFBVTs7OztnQkExRGdELE1BQU07NkNBNEU1RCxRQUFRLFlBQUksTUFBTSxTQUFDLGNBQWM7Z0JBQ2tCLHFCQUFxQix1QkFBeEUsUUFBUTs7SUF1cUJiLGlCQUFDO0NBQUEsQUExckJELElBMHJCQztTQXpyQlksVUFBVTs7O0lBQ3JCLGlDQUEwQjs7SUFDMUIsaUNBQThCOztJQUM5QixnQ0FBNkI7O0lBQzdCLCtCQUFvQjs7Ozs7SUFFcEIsZ0NBQThDOzs7OztJQUM5QywrQkFBNkM7Ozs7O0lBQzdDLHNDQUF3Qzs7Ozs7SUFDeEMsdUNBQXlDOzs7OztJQUN6QyxxQ0FBZ0Q7Ozs7O0lBQ2hELG9DQUE4Qzs7Ozs7SUFDOUMsc0NBQXdDOzs7OztJQUN4QyxrQ0FBMEM7Ozs7O0lBR3hDLDBCQUFvQjs7Ozs7SUFDcEIsb0NBQTJFOzs7OztJQUMzRSwyQ0FBeUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE5nWm9uZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIE1hcGJveEdsIGZyb20gJ21hcGJveC1nbCc7XG5pbXBvcnQgeyBBc3luY1N1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlyc3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNYXBFdmVudCwgTWFwSW1hZ2VEYXRhLCBNYXBJbWFnZU9wdGlvbnMgfSBmcm9tICcuL21hcC50eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBNQVBCT1hfQVBJX0tFWSA9IG5ldyBJbmplY3Rpb25Ub2tlbignTWFwYm94QXBpS2V5Jyk7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNZ2xSZXNpemVFdmVudEVtaXR0ZXIge1xuICBhYnN0cmFjdCByZXNpemVFdmVudDogT2JzZXJ2YWJsZTx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXR1cE1hcCB7XG4gIGFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuICBjdXN0b21NYXBib3hBcGlVcmw/OiBzdHJpbmc7XG4gIG1hcE9wdGlvbnM6IGFueTsgLy8gTWFwYm94R2wuTWFwYm94T3B0aW9uc1xuICBtYXBFdmVudHM6IE1hcEV2ZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNldHVwTGF5ZXIge1xuICBsYXllck9wdGlvbnM6IE1hcGJveEdsLkxheWVyO1xuICBsYXllckV2ZW50czoge1xuICAgIGNsaWNrOiBFdmVudEVtaXR0ZXI8TWFwYm94R2wuTWFwTW91c2VFdmVudD47XG4gICAgbW91c2VFbnRlcjogRXZlbnRFbWl0dGVyPE1hcGJveEdsLk1hcE1vdXNlRXZlbnQ+O1xuICAgIG1vdXNlTGVhdmU6IEV2ZW50RW1pdHRlcjxNYXBib3hHbC5NYXBNb3VzZUV2ZW50PjtcbiAgICBtb3VzZU1vdmU6IEV2ZW50RW1pdHRlcjxNYXBib3hHbC5NYXBNb3VzZUV2ZW50PjtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXR1cFBvcHVwIHtcbiAgcG9wdXBPcHRpb25zOiBNYXBib3hHbC5Qb3B1cE9wdGlvbnM7XG4gIHBvcHVwRXZlbnRzOiB7XG4gICAgb3BlbjogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dXBNYXJrZXIge1xuICBtYXJrZXJzT3B0aW9uczoge1xuICAgIG9mZnNldD86IE1hcGJveEdsLlBvaW50TGlrZTtcbiAgICBhbmNob3I/OiBNYXBib3hHbC5BbmNob3I7XG4gICAgZHJhZ2dhYmxlPzogYm9vbGVhbjtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBmZWF0dXJlPzogR2VvSlNPTi5GZWF0dXJlPEdlb0pTT04uUG9pbnQ+O1xuICAgIGxuZ0xhdD86IE1hcGJveEdsLkxuZ0xhdExpa2U7XG4gIH07XG4gIG1hcmtlcnNFdmVudHM6IHtcbiAgICBkcmFnU3RhcnQ6IEV2ZW50RW1pdHRlcjxNYXBib3hHbC5NYXJrZXI+O1xuICAgIGRyYWc6IEV2ZW50RW1pdHRlcjxNYXBib3hHbC5NYXJrZXI+O1xuICAgIGRyYWdFbmQ6IEV2ZW50RW1pdHRlcjxNYXBib3hHbC5NYXJrZXI+O1xuICB9O1xufVxuXG5leHBvcnQgdHlwZSBNb3ZpbmdPcHRpb25zID1cbiAgfCBNYXBib3hHbC5GbHlUb09wdGlvbnNcbiAgfCAoTWFwYm94R2wuQW5pbWF0aW9uT3B0aW9ucyAmIE1hcGJveEdsLkNhbWVyYU9wdGlvbnMpXG4gIHwgTWFwYm94R2wuQ2FtZXJhT3B0aW9ucztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1hcFNlcnZpY2Uge1xuICBtYXBJbnN0YW5jZTogTWFwYm94R2wuTWFwO1xuICBtYXBDcmVhdGVkJDogT2JzZXJ2YWJsZTx2b2lkPjtcbiAgbWFwTG9hZGVkJDogT2JzZXJ2YWJsZTx2b2lkPjtcbiAgbWFwRXZlbnRzOiBNYXBFdmVudDtcblxuICBwcml2YXRlIG1hcENyZWF0ZWQgPSBuZXcgQXN5bmNTdWJqZWN0PHZvaWQ+KCk7XG4gIHByaXZhdGUgbWFwTG9hZGVkID0gbmV3IEFzeW5jU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIGxheWVySWRzVG9SZW1vdmU6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgc291cmNlSWRzVG9SZW1vdmU6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgbWFya2Vyc1RvUmVtb3ZlOiBNYXBib3hHbC5NYXJrZXJbXSA9IFtdO1xuICBwcml2YXRlIHBvcHVwc1RvUmVtb3ZlOiBNYXBib3hHbC5Qb3B1cFtdID0gW107XG4gIHByaXZhdGUgaW1hZ2VJZHNUb1JlbW92ZTogc3RyaW5nW10gPSBbXTtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB6b25lOiBOZ1pvbmUsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChNQVBCT1hfQVBJX0tFWSkgcHJpdmF0ZSByZWFkb25seSBNQVBCT1hfQVBJX0tFWTogc3RyaW5nLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgTWdsUmVzaXplRXZlbnRFbWl0dGVyOiBNZ2xSZXNpemVFdmVudEVtaXR0ZXJcbiAgKSB7XG4gICAgdGhpcy5tYXBDcmVhdGVkJCA9IHRoaXMubWFwQ3JlYXRlZC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLm1hcExvYWRlZCQgPSB0aGlzLm1hcExvYWRlZC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHNldHVwKG9wdGlvbnM6IFNldHVwTWFwKSB7XG4gICAgLy8gTmVlZCBvblN0YWJsZSB0byB3YWl0IGZvciBhIHBvdGVudGlhbCBAYW5ndWxhci9yb3V0ZSB0cmFuc2l0aW9uIHRvIGVuZFxuICAgIHRoaXMuem9uZS5vblN0YWJsZS5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAvLyBXb3JrYXJvdW5kIHJvbGx1cCBpc3N1ZVxuICAgICAgdGhpcy5hc3NpZ24oTWFwYm94R2wsICdhY2Nlc3NUb2tlbicsIG9wdGlvbnMuYWNjZXNzVG9rZW4gfHwgdGhpcy5NQVBCT1hfQVBJX0tFWSk7XG4gICAgICBpZiAob3B0aW9ucy5jdXN0b21NYXBib3hBcGlVcmwpIHtcbiAgICAgICAgdGhpcy5hc3NpZ24oTWFwYm94R2wsICdjb25maWcuQVBJX1VSTCcsIG9wdGlvbnMuY3VzdG9tTWFwYm94QXBpVXJsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3JlYXRlTWFwKG9wdGlvbnMubWFwT3B0aW9ucyk7XG4gICAgICB0aGlzLmhvb2tFdmVudHMob3B0aW9ucy5tYXBFdmVudHMpO1xuICAgICAgdGhpcy5tYXBFdmVudHMgPSBvcHRpb25zLm1hcEV2ZW50cztcbiAgICAgIHRoaXMubWFwQ3JlYXRlZC5uZXh0KHVuZGVmaW5lZCk7XG4gICAgICB0aGlzLm1hcENyZWF0ZWQuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3lNYXAoKSB7XG4gICAgaWYgKHRoaXMubWFwSW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZU1pblpvb20obWluWm9vbTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLnNldE1pblpvb20obWluWm9vbSk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVNYXhab29tKG1heFpvb206IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5zZXRNYXhab29tKG1heFpvb20pO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlU2Nyb2xsWm9vbShzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHN0YXR1cyA/IHRoaXMubWFwSW5zdGFuY2Uuc2Nyb2xsWm9vbS5lbmFibGUoKSA6IHRoaXMubWFwSW5zdGFuY2Uuc2Nyb2xsWm9vbS5kaXNhYmxlKCk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVEcmFnUm90YXRlKHN0YXR1czogYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgc3RhdHVzID8gdGhpcy5tYXBJbnN0YW5jZS5kcmFnUm90YXRlLmVuYWJsZSgpIDogdGhpcy5tYXBJbnN0YW5jZS5kcmFnUm90YXRlLmRpc2FibGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVRvdWNoWm9vbVJvdGF0ZShzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHN0YXR1cyA/IHRoaXMubWFwSW5zdGFuY2UudG91Y2hab29tUm90YXRlLmVuYWJsZSgpIDogdGhpcy5tYXBJbnN0YW5jZS50b3VjaFpvb21Sb3RhdGUuZGlzYWJsZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlRG91YmxlQ2xpY2tab29tKHN0YXR1czogYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgc3RhdHVzID8gdGhpcy5tYXBJbnN0YW5jZS5kb3VibGVDbGlja1pvb20uZW5hYmxlKCkgOiB0aGlzLm1hcEluc3RhbmNlLmRvdWJsZUNsaWNrWm9vbS5kaXNhYmxlKCk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVLZXlib2FyZChzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHN0YXR1cyA/IHRoaXMubWFwSW5zdGFuY2Uua2V5Ym9hcmQuZW5hYmxlKCkgOiB0aGlzLm1hcEluc3RhbmNlLmtleWJvYXJkLmRpc2FibGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZURyYWdQYW4oc3RhdHVzOiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBzdGF0dXMgPyB0aGlzLm1hcEluc3RhbmNlLmRyYWdQYW4uZW5hYmxlKCkgOiB0aGlzLm1hcEluc3RhbmNlLmRyYWdQYW4uZGlzYWJsZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlQm94Wm9vbShzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHN0YXR1cyA/IHRoaXMubWFwSW5zdGFuY2UuYm94Wm9vbS5lbmFibGUoKSA6IHRoaXMubWFwSW5zdGFuY2UuYm94Wm9vbS5kaXNhYmxlKCk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVTdHlsZShzdHlsZTogTWFwYm94R2wuU3R5bGUpIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uuc2V0U3R5bGUoc3R5bGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlTWF4Qm91bmRzKG1heEJvdW5kczogTWFwYm94R2wuTG5nTGF0Qm91bmRzTGlrZSkge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5zZXRNYXhCb3VuZHMobWF4Qm91bmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNoYW5nZUNhbnZhc0N1cnNvcihjdXJzb3I6IHN0cmluZykge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMubWFwSW5zdGFuY2UuZ2V0Q2FudmFzQ29udGFpbmVyKCk7XG4gICAgY2FudmFzLnN0eWxlLmN1cnNvciA9IGN1cnNvcjtcbiAgfVxuXG4gIHF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhcbiAgICBwb2ludE9yQm94PzogTWFwYm94R2wuUG9pbnRMaWtlIHwgW01hcGJveEdsLlBvaW50TGlrZSwgTWFwYm94R2wuUG9pbnRMaWtlXSxcbiAgICBwYXJhbWV0ZXJzPzogeyBsYXllcnM/OiBzdHJpbmdbXTsgZmlsdGVyPzogYW55W10gfVxuICApOiBHZW9KU09OLkZlYXR1cmU8R2VvSlNPTi5HZW9tZXRyeU9iamVjdD5bXSB7XG4gICAgcmV0dXJuIHRoaXMubWFwSW5zdGFuY2UucXVlcnlSZW5kZXJlZEZlYXR1cmVzKHBvaW50T3JCb3gsIHBhcmFtZXRlcnMpO1xuICB9XG5cbiAgcGFuVG8oY2VudGVyOiBNYXBib3hHbC5MbmdMYXRMaWtlLCBvcHRpb25zPzogTWFwYm94R2wuQW5pbWF0aW9uT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5wYW5UbyhjZW50ZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgbW92ZShcbiAgICBtb3ZpbmdNZXRob2Q6ICdqdW1wVG8nIHwgJ2Vhc2VUbycgfCAnZmx5VG8nLFxuICAgIG1vdmluZ09wdGlvbnM/OiBNb3ZpbmdPcHRpb25zLFxuICAgIHpvb20/OiBudW1iZXIsXG4gICAgY2VudGVyPzogTWFwYm94R2wuTG5nTGF0TGlrZSxcbiAgICBiZWFyaW5nPzogbnVtYmVyLFxuICAgIHBpdGNoPzogbnVtYmVyXG4gICkge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgKDxhbnk+dGhpcy5tYXBJbnN0YW5jZVttb3ZpbmdNZXRob2RdKSh7XG4gICAgICAgIC4uLm1vdmluZ09wdGlvbnMsXG4gICAgICAgIHpvb206IHpvb20gPyB6b29tIDogdGhpcy5tYXBJbnN0YW5jZS5nZXRab29tKCksXG4gICAgICAgIGNlbnRlcjogY2VudGVyID8gY2VudGVyIDogdGhpcy5tYXBJbnN0YW5jZS5nZXRDZW50ZXIoKSxcbiAgICAgICAgYmVhcmluZzogYmVhcmluZyA/IGJlYXJpbmcgOiB0aGlzLm1hcEluc3RhbmNlLmdldEJlYXJpbmcoKSxcbiAgICAgICAgcGl0Y2g6IHBpdGNoID8gcGl0Y2ggOiB0aGlzLm1hcEluc3RhbmNlLmdldFBpdGNoKClcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkTGF5ZXIobGF5ZXI6IFNldHVwTGF5ZXIsIGJpbmRFdmVudHM6IGJvb2xlYW4sIGJlZm9yZT86IHN0cmluZykge1xuICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyhsYXllci5sYXllck9wdGlvbnMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IHRrZXkgPSA8a2V5b2YgTWFwYm94R2wuTGF5ZXI+a2V5O1xuICAgICAgICBpZiAobGF5ZXIubGF5ZXJPcHRpb25zW3RrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkZWxldGUgbGF5ZXIubGF5ZXJPcHRpb25zW3RrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2UuYWRkTGF5ZXIobGF5ZXIubGF5ZXJPcHRpb25zLCBiZWZvcmUpO1xuICAgICAgaWYgKGJpbmRFdmVudHMpIHtcbiAgICAgICAgaWYgKGxheWVyLmxheWVyRXZlbnRzLmNsaWNrLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdjbGljaycsIGxheWVyLmxheWVyT3B0aW9ucy5pZCwgKGV2dDogTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgIGxheWVyLmxheWVyRXZlbnRzLmNsaWNrLmVtaXQoZXZ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXllci5sYXllckV2ZW50cy5tb3VzZUVudGVyLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdtb3VzZWVudGVyJywgbGF5ZXIubGF5ZXJPcHRpb25zLmlkLCAoZXZ0OiBNYXBib3hHbC5NYXBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgbGF5ZXIubGF5ZXJFdmVudHMubW91c2VFbnRlci5lbWl0KGV2dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGF5ZXIubGF5ZXJFdmVudHMubW91c2VMZWF2ZS5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignbW91c2VsZWF2ZScsIGxheWVyLmxheWVyT3B0aW9ucy5pZCwgKGV2dDogTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgIGxheWVyLmxheWVyRXZlbnRzLm1vdXNlTGVhdmUuZW1pdChldnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxheWVyLmxheWVyRXZlbnRzLm1vdXNlTW92ZS5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignbW91c2Vtb3ZlJywgbGF5ZXIubGF5ZXJPcHRpb25zLmlkLCAoZXZ0OiBNYXBib3hHbC5NYXBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgbGF5ZXIubGF5ZXJFdmVudHMubW91c2VNb3ZlLmVtaXQoZXZ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVMYXllcihsYXllcklkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmxheWVySWRzVG9SZW1vdmUucHVzaChsYXllcklkKTtcbiAgfVxuXG4gIGFkZE1hcmtlcihtYXJrZXI6IFNldHVwTWFya2VyKSB7XG4gICAgY29uc3Qgb3B0aW9uczogTWFwYm94R2wuTWFya2VyT3B0aW9ucyA9IHtcbiAgICAgIG9mZnNldDogbWFya2VyLm1hcmtlcnNPcHRpb25zLm9mZnNldCxcbiAgICAgIGFuY2hvcjogbWFya2VyLm1hcmtlcnNPcHRpb25zLmFuY2hvcixcbiAgICAgIGRyYWdnYWJsZTogISFtYXJrZXIubWFya2Vyc09wdGlvbnMuZHJhZ2dhYmxlXG4gICAgfTtcbiAgICBpZiAobWFya2VyLm1hcmtlcnNPcHRpb25zLmVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICBvcHRpb25zLmVsZW1lbnQgPSBtYXJrZXIubWFya2Vyc09wdGlvbnMuZWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgbWFya2VySW5zdGFuY2UgPSBuZXcgTWFwYm94R2wuTWFya2VyKG9wdGlvbnMpO1xuICAgIGlmIChtYXJrZXIubWFya2Vyc0V2ZW50cy5kcmFnU3RhcnQub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgbWFya2VySW5zdGFuY2Uub24oJ2RyYWdzdGFydCcsIChldmVudDogeyB0YXJnZXQ6IE1hcGJveEdsLk1hcmtlciB9KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IG1hcmtlci5tYXJrZXJzRXZlbnRzLmRyYWdTdGFydC5lbWl0KGV2ZW50LnRhcmdldCkpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobWFya2VyLm1hcmtlcnNFdmVudHMuZHJhZy5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICBtYXJrZXJJbnN0YW5jZS5vbignZHJhZycsIChldmVudDogeyB0YXJnZXQ6IE1hcGJveEdsLk1hcmtlciB9KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IG1hcmtlci5tYXJrZXJzRXZlbnRzLmRyYWcuZW1pdChldmVudC50YXJnZXQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1hcmtlci5tYXJrZXJzRXZlbnRzLmRyYWdFbmQub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgbWFya2VySW5zdGFuY2Uub24oJ2RyYWdlbmQnLCAoZXZlbnQ6IHsgdGFyZ2V0OiBNYXBib3hHbC5NYXJrZXIgfSkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBtYXJrZXIubWFya2Vyc0V2ZW50cy5kcmFnRW5kLmVtaXQoZXZlbnQudGFyZ2V0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGxuZ0xhdDogTWFwYm94R2wuTG5nTGF0TGlrZSA9IG1hcmtlci5tYXJrZXJzT3B0aW9ucy5mZWF0dXJlXG4gICAgICA/IDxbbnVtYmVyLCBudW1iZXJdPm1hcmtlci5tYXJrZXJzT3B0aW9ucy5mZWF0dXJlLmdlb21ldHJ5IS5jb29yZGluYXRlc1xuICAgICAgOiBtYXJrZXIubWFya2Vyc09wdGlvbnMubG5nTGF0ITtcbiAgICBtYXJrZXJJbnN0YW5jZS5zZXRMbmdMYXQobG5nTGF0KTtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIG1hcmtlckluc3RhbmNlLmFkZFRvKHRoaXMubWFwSW5zdGFuY2UpO1xuICAgICAgcmV0dXJuIG1hcmtlckluc3RhbmNlO1xuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlTWFya2VyKG1hcmtlcjogTWFwYm94R2wuTWFya2VyKSB7XG4gICAgdGhpcy5tYXJrZXJzVG9SZW1vdmUucHVzaChtYXJrZXIpO1xuICB9XG5cbiAgY3JlYXRlUG9wdXAocG9wdXA6IFNldHVwUG9wdXAsIGVsZW1lbnQ6IE5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKHBvcHVwLnBvcHVwT3B0aW9ucykuZm9yRWFjaChcbiAgICAgICAgKGtleSkgPT4gKDxhbnk+cG9wdXAucG9wdXBPcHRpb25zKVtrZXldID09PSB1bmRlZmluZWQgJiYgZGVsZXRlICg8YW55PnBvcHVwLnBvcHVwT3B0aW9ucylba2V5XVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHBvcHVwSW5zdGFuY2UgPSBuZXcgTWFwYm94R2wuUG9wdXAocG9wdXAucG9wdXBPcHRpb25zKTtcbiAgICAgIHBvcHVwSW5zdGFuY2Uuc2V0RE9NQ29udGVudChlbGVtZW50KTtcbiAgICAgIGlmIChwb3B1cC5wb3B1cEV2ZW50cy5jbG9zZS5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgIHBvcHVwSW5zdGFuY2Uub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgcG9wdXAucG9wdXBFdmVudHMuY2xvc2UuZW1pdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwb3B1cC5wb3B1cEV2ZW50cy5vcGVuLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgcG9wdXBJbnN0YW5jZS5vbignb3BlbicsICgpID0+IHtcbiAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIHBvcHVwLnBvcHVwRXZlbnRzLm9wZW4uZW1pdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb3B1cEluc3RhbmNlO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkUG9wdXBUb01hcChwb3B1cDogTWFwYm94R2wuUG9wdXAsIGxuZ0xhdDogTWFwYm94R2wuTG5nTGF0TGlrZSwgc2tpcE9wZW5FdmVudCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAoc2tpcE9wZW5FdmVudCAmJiAoPGFueT5wb3B1cCkuX2xpc3RlbmVycykge1xuICAgICAgICBkZWxldGUgKDxhbnk+cG9wdXApLl9saXN0ZW5lcnNbJ29wZW4nXTtcbiAgICAgIH1cbiAgICAgIHBvcHVwLnNldExuZ0xhdChsbmdMYXQpO1xuICAgICAgcG9wdXAuYWRkVG8odGhpcy5tYXBJbnN0YW5jZSk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRQb3B1cFRvTWFya2VyKG1hcmtlcjogTWFwYm94R2wuTWFya2VyLCBwb3B1cDogTWFwYm94R2wuUG9wdXApIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIG1hcmtlci5zZXRQb3B1cChwb3B1cCk7XG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVQb3B1cEZyb21NYXAocG9wdXA6IE1hcGJveEdsLlBvcHVwLCBza2lwQ2xvc2VFdmVudCA9IGZhbHNlKSB7XG4gICAgaWYgKHNraXBDbG9zZUV2ZW50ICYmICg8YW55PnBvcHVwKS5fbGlzdGVuZXJzKSB7XG4gICAgICBkZWxldGUgKDxhbnk+cG9wdXApLl9saXN0ZW5lcnNbJ2Nsb3NlJ107XG4gICAgfVxuICAgIHRoaXMucG9wdXBzVG9SZW1vdmUucHVzaChwb3B1cCk7XG4gIH1cblxuICByZW1vdmVQb3B1cEZyb21NYXJrZXIobWFya2VyOiBNYXBib3hHbC5NYXJrZXIpIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIG1hcmtlci5zZXRQb3B1cCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkQ29udHJvbChcbiAgICBjb250cm9sOiBNYXBib3hHbC5Db250cm9sIHwgTWFwYm94R2wuSUNvbnRyb2wsXG4gICAgcG9zaXRpb24/OiAndG9wLXJpZ2h0JyB8ICd0b3AtbGVmdCcgfCAnYm90dG9tLXJpZ2h0JyB8ICdib3R0b20tbGVmdCdcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLmFkZENvbnRyb2woPGFueT5jb250cm9sLCBwb3NpdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVDb250cm9sKGNvbnRyb2w6IE1hcGJveEdsLkNvbnRyb2wgfCBNYXBib3hHbC5JQ29udHJvbCkge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5yZW1vdmVDb250cm9sKDxhbnk+Y29udHJvbCk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBsb2FkQW5kQWRkSW1hZ2UoaW1hZ2VJZDogc3RyaW5nLCB1cmw6IHN0cmluZywgb3B0aW9ucz86IE1hcEltYWdlT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5tYXBJbnN0YW5jZS5sb2FkSW1hZ2UodXJsLCAoZXJyb3I6IHsgc3RhdHVzOiBudW1iZXIgfSB8IG51bGwsIGltYWdlOiBJbWFnZURhdGEpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWRkSW1hZ2UoaW1hZ2VJZCwgaW1hZ2UsIG9wdGlvbnMpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZEltYWdlKGltYWdlSWQ6IHN0cmluZywgZGF0YTogTWFwSW1hZ2VEYXRhLCBvcHRpb25zPzogTWFwSW1hZ2VPcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLmFkZEltYWdlKGltYWdlSWQsIDxhbnk+ZGF0YSwgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVJbWFnZShpbWFnZUlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmltYWdlSWRzVG9SZW1vdmUucHVzaChpbWFnZUlkKTtcbiAgfVxuXG4gIGFkZFNvdXJjZShzb3VyY2VJZDogc3RyaW5nLCBzb3VyY2U6IE1hcGJveEdsLkFueVNvdXJjZURhdGEpIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaCgoa2V5KSA9PiAoPGFueT5zb3VyY2UpW2tleV0gPT09IHVuZGVmaW5lZCAmJiBkZWxldGUgKDxhbnk+c291cmNlKVtrZXldKTtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2UuYWRkU291cmNlKHNvdXJjZUlkLCBzb3VyY2UpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0U291cmNlPFQ+KHNvdXJjZUlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gPFQ+KDxhbnk+dGhpcy5tYXBJbnN0YW5jZS5nZXRTb3VyY2Uoc291cmNlSWQpKTtcbiAgfVxuXG4gIHJlbW92ZVNvdXJjZShzb3VyY2VJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5zb3VyY2VJZHNUb1JlbW92ZS5wdXNoKHNvdXJjZUlkKTtcbiAgfVxuXG4gIHNldEFsbExheWVyUGFpbnRQcm9wZXJ0eShcbiAgICBsYXllcklkOiBzdHJpbmcsXG4gICAgcGFpbnQ6XG4gICAgICB8IE1hcGJveEdsLkJhY2tncm91bmRQYWludFxuICAgICAgfCBNYXBib3hHbC5GaWxsUGFpbnRcbiAgICAgIHwgTWFwYm94R2wuRmlsbEV4dHJ1c2lvblBhaW50XG4gICAgICB8IE1hcGJveEdsLkxpbmVQYWludFxuICAgICAgfCBNYXBib3hHbC5TeW1ib2xQYWludFxuICAgICAgfCBNYXBib3hHbC5SYXN0ZXJQYWludFxuICAgICAgfCBNYXBib3hHbC5DaXJjbGVQYWludFxuICApIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKHBhaW50KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgLy8gVE9ETyBDaGVjayBmb3IgcGVyZiwgc2V0UGFpbnRQcm9wZXJ0eSBvbmx5IG9uIGNoYW5nZWQgcGFpbnQgcHJvcHMgbWF5YmVcbiAgICAgICAgdGhpcy5tYXBJbnN0YW5jZS5zZXRQYWludFByb3BlcnR5KGxheWVySWQsIGtleSwgKDxhbnk+cGFpbnQpW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRBbGxMYXllckxheW91dFByb3BlcnR5KFxuICAgIGxheWVySWQ6IHN0cmluZyxcbiAgICBsYXlvdXQ6XG4gICAgICB8IE1hcGJveEdsLkJhY2tncm91bmRMYXlvdXRcbiAgICAgIHwgTWFwYm94R2wuRmlsbExheW91dFxuICAgICAgfCBNYXBib3hHbC5GaWxsRXh0cnVzaW9uTGF5b3V0XG4gICAgICB8IE1hcGJveEdsLkxpbmVMYXlvdXRcbiAgICAgIHwgTWFwYm94R2wuU3ltYm9sTGF5b3V0XG4gICAgICB8IE1hcGJveEdsLlJhc3RlckxheW91dFxuICAgICAgfCBNYXBib3hHbC5DaXJjbGVMYXlvdXRcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyhsYXlvdXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAvLyBUT0RPIENoZWNrIGZvciBwZXJmLCBzZXRQYWludFByb3BlcnR5IG9ubHkgb24gY2hhbmdlZCBwYWludCBwcm9wcyBtYXliZVxuICAgICAgICB0aGlzLm1hcEluc3RhbmNlLnNldExheW91dFByb3BlcnR5KGxheWVySWQsIGtleSwgKDxhbnk+bGF5b3V0KVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0TGF5ZXJGaWx0ZXIobGF5ZXJJZDogc3RyaW5nLCBmaWx0ZXI6IGFueVtdKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLnNldEZpbHRlcihsYXllcklkLCBmaWx0ZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0TGF5ZXJCZWZvcmUobGF5ZXJJZDogc3RyaW5nLCBiZWZvcmVJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm1vdmVMYXllcihsYXllcklkLCBiZWZvcmVJZCk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRMYXllclpvb21SYW5nZShsYXllcklkOiBzdHJpbmcsIG1pblpvb20/OiBudW1iZXIsIG1heFpvb20/OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uuc2V0TGF5ZXJab29tUmFuZ2UobGF5ZXJJZCwgbWluWm9vbSA/IG1pblpvb20gOiAwLCBtYXhab29tID8gbWF4Wm9vbSA6IDIwKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZpdEJvdW5kcyhib3VuZHM6IE1hcGJveEdsLkxuZ0xhdEJvdW5kc0xpa2UsIG9wdGlvbnM/OiBNYXBib3hHbC5GaXRCb3VuZHNPcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLmZpdEJvdW5kcyhib3VuZHMsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgZml0U2NyZWVuQ29vcmRpbmF0ZXMoXG4gICAgcG9pbnRzOiBbTWFwYm94R2wuUG9pbnRMaWtlLCBNYXBib3hHbC5Qb2ludExpa2VdLFxuICAgIGJlYXJpbmc6IG51bWJlcixcbiAgICBvcHRpb25zPzogTWFwYm94R2wuQW5pbWF0aW9uT3B0aW9ucyAmIE1hcGJveEdsLkNhbWVyYU9wdGlvbnNcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLmZpdFNjcmVlbkNvb3JkaW5hdGVzKHBvaW50c1swXSwgcG9pbnRzWzFdLCBiZWFyaW5nLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFwcGx5Q2hhbmdlcygpIHtcbiAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVMYXllcnMoKTtcbiAgICAgIHRoaXMucmVtb3ZlU291cmNlcygpO1xuICAgICAgdGhpcy5yZW1vdmVNYXJrZXJzKCk7XG4gICAgICB0aGlzLnJlbW92ZVBvcHVwcygpO1xuICAgICAgdGhpcy5yZW1vdmVJbWFnZXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTWFwKG9wdGlvbnM6IE1hcGJveEdsLk1hcGJveE9wdGlvbnMpIHtcbiAgICBOZ1pvbmUuYXNzZXJ0Tm90SW5Bbmd1bGFyWm9uZSgpO1xuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCB0a2V5ID0gPGtleW9mIE1hcGJveEdsLk1hcGJveE9wdGlvbnM+a2V5O1xuICAgICAgaWYgKG9wdGlvbnNbdGtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgb3B0aW9uc1t0a2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm1hcEluc3RhbmNlID0gbmV3IE1hcGJveEdsLk1hcChvcHRpb25zKTtcblxuICAgIGNvbnN0IGlzSUVvckVkZ2UgPSB3aW5kb3cgJiYgL21zaWVcXHN8dHJpZGVudFxcL3xlZGdlXFwvL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaWYgKGlzSUVvckVkZ2UpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uuc2V0U3R5bGUob3B0aW9ucy5zdHlsZSEpO1xuICAgIH1cblxuICAgIGNvbnN0IHN1YkNoYW5nZXMgPSB0aGlzLnpvbmUub25NaWNyb3Rhc2tFbXB0eS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5hcHBseUNoYW5nZXMoKSk7XG4gICAgaWYgKHRoaXMuTWdsUmVzaXplRXZlbnRFbWl0dGVyKSB7XG4gICAgICBjb25zdCBzdWJSZXNpemUgPSB0aGlzLk1nbFJlc2l6ZUV2ZW50RW1pdHRlci5yZXNpemVFdmVudC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLm1hcEluc3RhbmNlLnJlc2l6ZSgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQoc3ViUmVzaXplKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKHN1YkNoYW5nZXMpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVMYXllcnMoKSB7XG4gICAgZm9yIChjb25zdCBsYXllcklkIG9mIHRoaXMubGF5ZXJJZHNUb1JlbW92ZSkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5yZW1vdmVMYXllcihsYXllcklkKTtcbiAgICB9XG4gICAgdGhpcy5sYXllcklkc1RvUmVtb3ZlID0gW107XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVNvdXJjZXMoKSB7XG4gICAgZm9yIChjb25zdCBzb3VyY2VJZCBvZiB0aGlzLnNvdXJjZUlkc1RvUmVtb3ZlKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLnJlbW92ZVNvdXJjZShzb3VyY2VJZCk7XG4gICAgfVxuICAgIHRoaXMuc291cmNlSWRzVG9SZW1vdmUgPSBbXTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTWFya2VycygpIHtcbiAgICBmb3IgKGNvbnN0IG1hcmtlciBvZiB0aGlzLm1hcmtlcnNUb1JlbW92ZSkge1xuICAgICAgbWFya2VyLnJlbW92ZSgpO1xuICAgIH1cbiAgICB0aGlzLm1hcmtlcnNUb1JlbW92ZSA9IFtdO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVQb3B1cHMoKSB7XG4gICAgZm9yIChjb25zdCBwb3B1cCBvZiB0aGlzLnBvcHVwc1RvUmVtb3ZlKSB7XG4gICAgICBwb3B1cC5yZW1vdmUoKTtcbiAgICB9XG4gICAgdGhpcy5wb3B1cHNUb1JlbW92ZSA9IFtdO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVJbWFnZXMoKSB7XG4gICAgZm9yIChjb25zdCBpbWFnZUlkIG9mIHRoaXMuaW1hZ2VJZHNUb1JlbW92ZSkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5yZW1vdmVJbWFnZShpbWFnZUlkKTtcbiAgICB9XG4gICAgdGhpcy5pbWFnZUlkc1RvUmVtb3ZlID0gW107XG4gIH1cblxuICBwcml2YXRlIGhvb2tFdmVudHMoZXZlbnRzOiBNYXBFdmVudCkge1xuICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ2xvYWQnLCAoKSA9PiB7XG4gICAgICB0aGlzLm1hcExvYWRlZC5uZXh0KHVuZGVmaW5lZCk7XG4gICAgICB0aGlzLm1hcExvYWRlZC5jb21wbGV0ZSgpO1xuICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMubG9hZC5lbWl0KHRoaXMubWFwSW5zdGFuY2UpKTtcbiAgICB9KTtcbiAgICBpZiAoZXZlbnRzLnJlc2l6ZS5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdyZXNpemUnLCAoKSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5yZXNpemUuZW1pdCgpKSk7XG4gICAgfVxuICAgIGlmIChldmVudHMucmVtb3ZlLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ3JlbW92ZScsICgpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLnJlbW92ZS5lbWl0KCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5tb3VzZURvd24ub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignbW91c2Vkb3duJywgKGV2dDogTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMubW91c2VEb3duLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMubW91c2VVcC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdtb3VzZXVwJywgKGV2dDogTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMubW91c2VVcC5lbWl0KGV2dCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5tb3VzZU1vdmUub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignbW91c2Vtb3ZlJywgKGV2dDogTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMubW91c2VNb3ZlLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMuY2xpY2sub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignY2xpY2snLCAoZXZ0OiBNYXBib3hHbC5NYXBNb3VzZUV2ZW50KSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5jbGljay5lbWl0KGV2dCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5kYmxDbGljay5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdkYmxjbGljaycsIChldnQ6IE1hcGJveEdsLk1hcE1vdXNlRXZlbnQpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLmRibENsaWNrLmVtaXQoZXZ0KSkpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLm1vdXNlRW50ZXIub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignbW91c2VlbnRlcicsIChldnQ6IE1hcGJveEdsLk1hcE1vdXNlRXZlbnQpID0+XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLm1vdXNlRW50ZXIuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5tb3VzZUxlYXZlLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ21vdXNlbGVhdmUnLCAoZXZ0OiBNYXBib3hHbC5NYXBNb3VzZUV2ZW50KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5tb3VzZUxlYXZlLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMubW91c2VPdmVyLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ21vdXNlb3ZlcicsIChldnQ6IE1hcGJveEdsLk1hcE1vdXNlRXZlbnQpID0+XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLm1vdXNlT3Zlci5lbWl0KGV2dCkpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLm1vdXNlT3V0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ21vdXNlb3V0JywgKGV2dDogTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMubW91c2VPdXQuZW1pdChldnQpKSk7XG4gICAgfVxuICAgIGlmIChldmVudHMuY29udGV4dE1lbnUub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignY29udGV4dG1lbnUnLCAoZXZ0OiBNYXBib3hHbC5NYXBNb3VzZUV2ZW50KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5jb250ZXh0TWVudS5lbWl0KGV2dCkpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLnRvdWNoU3RhcnQub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbigndG91Y2hzdGFydCcsIChldnQ6IE1hcGJveEdsLk1hcFRvdWNoRXZlbnQpID0+XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLnRvdWNoU3RhcnQuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy50b3VjaEVuZC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCd0b3VjaGVuZCcsIChldnQ6IE1hcGJveEdsLk1hcFRvdWNoRXZlbnQpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLnRvdWNoRW5kLmVtaXQoZXZ0KSkpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLnRvdWNoTW92ZS5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCd0b3VjaG1vdmUnLCAoZXZ0OiBNYXBib3hHbC5NYXBUb3VjaEV2ZW50KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy50b3VjaE1vdmUuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy50b3VjaENhbmNlbC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCd0b3VjaGNhbmNlbCcsIChldnQ6IE1hcGJveEdsLk1hcFRvdWNoRXZlbnQpID0+XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLnRvdWNoQ2FuY2VsLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMud2hlZWwub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgLy8gTWFwYm94R2wuTWFwV2hlZWxFdmVudFxuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignd2hlZWwnLCAoZXZ0OiBhbnkpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLndoZWVsLmVtaXQoZXZ0KSkpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLm1vdmVTdGFydC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdtb3Zlc3RhcnQnLCAoZXZ0OiBEcmFnRXZlbnQpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLm1vdmVTdGFydC5lbWl0KGV2dCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5tb3ZlLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ21vdmUnLCAoZXZ0OiBNYXBib3hHbC5NYXBUb3VjaEV2ZW50IHwgTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMubW92ZS5lbWl0KGV2dCkpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLm1vdmVFbmQub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignbW92ZWVuZCcsIChldnQ6IERyYWdFdmVudCkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMubW92ZUVuZC5lbWl0KGV2dCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5kcmFnU3RhcnQub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignZHJhZ3N0YXJ0JywgKGV2dDogRHJhZ0V2ZW50KSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5kcmFnU3RhcnQuZW1pdChldnQpKSk7XG4gICAgfVxuICAgIGlmIChldmVudHMuZHJhZy5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdkcmFnJywgKGV2dDogTWFwYm94R2wuTWFwVG91Y2hFdmVudCB8IE1hcGJveEdsLk1hcE1vdXNlRXZlbnQpID0+XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLmRyYWcuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5kcmFnRW5kLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ2RyYWdlbmQnLCAoZXZ0OiBEcmFnRXZlbnQpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLmRyYWdFbmQuZW1pdChldnQpKSk7XG4gICAgfVxuICAgIGlmIChldmVudHMuem9vbVN0YXJ0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ3pvb21zdGFydCcsIChldnQ6IE1hcGJveEdsLk1hcFRvdWNoRXZlbnQgfCBNYXBib3hHbC5NYXBNb3VzZUV2ZW50KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy56b29tU3RhcnQuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy56b29tRXZ0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ3pvb20nLCAoZXZ0OiBNYXBib3hHbC5NYXBUb3VjaEV2ZW50IHwgTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMuem9vbUV2dC5lbWl0KGV2dCkpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLnpvb21FbmQub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignem9vbWVuZCcsIChldnQ6IE1hcGJveEdsLk1hcFRvdWNoRXZlbnQgfCBNYXBib3hHbC5NYXBNb3VzZUV2ZW50KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy56b29tRW5kLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMucm90YXRlU3RhcnQub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbigncm90YXRlc3RhcnQnLCAoZXZ0OiBNYXBib3hHbC5NYXBUb3VjaEV2ZW50IHwgTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMucm90YXRlU3RhcnQuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5yb3RhdGUub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbigncm90YXRlJywgKGV2dDogTWFwYm94R2wuTWFwVG91Y2hFdmVudCB8IE1hcGJveEdsLk1hcE1vdXNlRXZlbnQpID0+XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLnJvdGF0ZS5lbWl0KGV2dCkpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLnJvdGF0ZUVuZC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdyb3RhdGVlbmQnLCAoZXZ0OiBNYXBib3hHbC5NYXBUb3VjaEV2ZW50IHwgTWFwYm94R2wuTWFwTW91c2VFdmVudCkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMucm90YXRlRW5kLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMucGl0Y2hTdGFydC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdwaXRjaHN0YXJ0JywgKGV2dDogTWFwYm94R2wuRXZlbnREYXRhKSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5waXRjaFN0YXJ0LmVtaXQoZXZ0KSkpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLnBpdGNoRXZ0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ3BpdGNoJywgKGV2dDogTWFwYm94R2wuRXZlbnREYXRhKSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5waXRjaEV2dC5lbWl0KGV2dCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5waXRjaEVuZC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdwaXRjaGVuZCcsIChldnQ6IE1hcGJveEdsLkV2ZW50RGF0YSkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMucGl0Y2hFbmQuZW1pdChldnQpKSk7XG4gICAgfVxuICAgIGlmIChldmVudHMuYm94Wm9vbVN0YXJ0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ2JveHpvb21zdGFydCcsIChldnQ6IE1hcGJveEdsLk1hcEJveFpvb21FdmVudCkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMuYm94Wm9vbVN0YXJ0LmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMuYm94Wm9vbUVuZC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdib3h6b29tZW5kJywgKGV2dDogTWFwYm94R2wuTWFwQm94Wm9vbUV2ZW50KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5ib3hab29tRW5kLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMuYm94Wm9vbUNhbmNlbC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdib3h6b29tY2FuY2VsJywgKGV2dDogTWFwYm94R2wuTWFwQm94Wm9vbUV2ZW50KSA9PlxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5ib3hab29tQ2FuY2VsLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMud2ViR2xDb250ZXh0TG9zdC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCd3ZWJnbGNvbnRleHRsb3N0JywgKCkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMud2ViR2xDb250ZXh0TG9zdC5lbWl0KCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy53ZWJHbENvbnRleHRSZXN0b3JlZC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsICgpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLndlYkdsQ29udGV4dFJlc3RvcmVkLmVtaXQoKSkpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLnJlbmRlci5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdyZW5kZXInLCAoKSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5yZW5kZXIuZW1pdCgpKSk7XG4gICAgfVxuICAgIGlmIChldmVudHMuZXJyb3Iub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignZXJyb3InLCAoZXZ0OiBNYXBib3hHbC5FcnJvckV2ZW50KSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IGV2ZW50cy5lcnJvci5lbWl0KGV2dCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5kYXRhLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ2RhdGEnLCAoZXZ0OiBNYXBib3hHbC5FdmVudERhdGEpID0+IHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLmRhdGEuZW1pdChldnQpKSk7XG4gICAgfVxuICAgIGlmIChldmVudHMuc3R5bGVEYXRhLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ3N0eWxlZGF0YScsIChldnQ6IE1hcGJveEdsLkV2ZW50RGF0YSkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMuc3R5bGVEYXRhLmVtaXQoZXZ0KSkpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRzLnNvdXJjZURhdGEub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tYXBJbnN0YW5jZS5vbignc291cmNlZGF0YScsIChldnQ6IE1hcGJveEdsLkV2ZW50RGF0YSkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMuc291cmNlRGF0YS5lbWl0KGV2dCkpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5kYXRhTG9hZGluZy5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdkYXRhbG9hZGluZycsIChldnQ6IE1hcGJveEdsLkV2ZW50RGF0YSkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMuZGF0YUxvYWRpbmcuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5zdHlsZURhdGFMb2FkaW5nLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWFwSW5zdGFuY2Uub24oJ3N0eWxlZGF0YWxvYWRpbmcnLCAoZXZ0OiBNYXBib3hHbC5FdmVudERhdGEpID0+XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLnN0eWxlRGF0YUxvYWRpbmcuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5zb3VyY2VEYXRhTG9hZGluZy5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdzb3VyY2VkYXRhbG9hZGluZycsIChldnQ6IE1hcGJveEdsLkV2ZW50RGF0YSkgPT5cbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMuc291cmNlRGF0YUxvYWRpbmcuZW1pdChldnQpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50cy5zdHlsZUltYWdlTWlzc2luZy5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKDxhbnk+J3N0eWxlaW1hZ2VtaXNzaW5nJywgKGV2dDogeyBpZDogc3RyaW5nIH0pID0+XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gZXZlbnRzLnN0eWxlSW1hZ2VNaXNzaW5nLmVtaXQoZXZ0KSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudHMuaWRsZS5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1hcEluc3RhbmNlLm9uKCdpZGxlJywgKCkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiBldmVudHMuaWRsZS5lbWl0KCkpKTtcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPIG1vdmUgdGhpcyBlbHNld2hlcmVcbiAgcHJpdmF0ZSBhc3NpZ24ob2JqOiBhbnksIHByb3A6IGFueSwgdmFsdWU6IGFueSkge1xuICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1wYXJhbWV0ZXItcmVhc3NpZ25tZW50XG4gICAgICBwcm9wID0gcHJvcC5zcGxpdCgnLicpO1xuICAgIH1cbiAgICBpZiAocHJvcC5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBlID0gcHJvcC5zaGlmdCgpO1xuICAgICAgdGhpcy5hc3NpZ24oKG9ialtlXSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmpbZV0pID09PSAnW29iamVjdCBPYmplY3RdJyA/IG9ialtlXSA6IHt9KSwgcHJvcCwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpbcHJvcFswXV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==